import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,f as e}from"./app-5ZyUDSyM.js";const l="/assets/img-20230409210451-eshIeLnV.png",t={},i=e('<p>​</p><figure><img src="'+l+`" alt="Linux 启动流程" tabindex="0" loading="lazy"><figcaption>Linux 启动流程</figcaption></figure><p>Centos开机启动主要过程如下:</p><ol><li><p>找到系统引导分区，执行引导程序，加载内核</p></li><li><p>执行init程序</p><p>a. /etc/rc.d/rc.sysinit # 由init执行的第一个脚本</p><p>b. /etc/rc.d/rc $RUNLEVEL # $RUNLEVEL为缺省的运行模式 ，服务器的运行级别为3</p><p>c. /etc/rc.d/rc.local #相应级别服务启动之后、再执行该文件（其实也可以把需要执行的命令写到该文件中）</p><p>d. /sbin/mingetty # 等待用户登录</p></li></ol><p>在Redhat/Centos中，/etc/rc.d/rc.sysinit主要做在各个运行模式中相同的初始化工作，包括：</p><ul><li><p>调入keymap以及系统字体</p></li><li><p>启动swapping</p></li><li><p>设置主机名</p></li><li><p>设置NIS域名</p></li><li><p>检查（fsck）并mount文件系统</p></li><li><p>打开quota</p></li><li><p>装载声卡模块，设置系统时钟等等。</p></li></ul><p>/etc/rc.d/rc则根据其参数指定的运行模式(运行级别，你在inittab文件中可以设置)来执行相应目录下的脚本。凡是以Kxx开头的，都以stop为参数来调用；凡是以Sxx开头的，都以start为参数来调用。调用的顺序按xx 从小到大来执行。(其中xx是数字、表示的是启动顺序)例如，假设缺省的运行模式是3，/etc/rc.d/rc就会按上述方式调用 /etc/rc.d/rc3.d/下的脚本。</p><p>值得一提的是，Redhat/Centos中的运行模式2、3、5都把/etc/rc.d/rc.local做为初始化脚本中的最后一个，所以用户可以自己在这个文件中添加一些需要在其他初始化工作之后，登录之前执行的命令。（对此提出了疑问，见后面的：rc.local不一定是最后执行的脚本）</p><blockquote><p>rwxrwxrwx 1 root root 11 Apr 12 14:26 S99local -&gt; ../rc.local</p></blockquote><p>init在等待/etc/rc.d/rc执行完毕之后（因为在/etc/inittab中/etc/rc.d/rc的action是wait），将在指定的各个虚拟终端上运行/sbin/mingetty，等待用户的登录。 至此，LINUX的启动结束。</p><p>Linux系统有7个运行级别，他们各自的含义是：</p><ul><li><p>第0级 关闭系统</p></li><li><p>第1级 单用户模式</p></li><li><p>第2级 没有网络多用户模式</p></li><li><p>第3级 有网络多用户模式</p></li><li><p>第4级 系统保留</p></li><li><p>第5级 有网络和图形的多用户模式</p></li><li><p>第6级 重启系统</p></li></ul><p>在centos中，rc.local不应是最后一个启动脚本。</p><p>centos运行级别为3，在/etc/rc3.d中存在S99local和S99smartd 这两个文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">11</span> Apr <span class="token number">12</span> <span class="token number">14</span>:26 S99local -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/rc.local
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">16</span> Apr <span class="token number">12</span> <span class="token number">14</span>:26 S99smartd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/smartd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>根据启动规则（启动的先后与文件名S之后的数字有关，数字越大，启动的顺序越靠后），rc.local比smartd先执行，为了验证这个猜想，在这两个脚本中分别添加下面的两个语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;rc.local&quot;</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span> <span class="token operator">&gt;&gt;</span> /test
<span class="token builtin class-name">echo</span> <span class="token string">&quot;smartd&quot;</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span><span class="token operator">&gt;&gt;</span> /test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>/test结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>smartdThu Jun <span class="token number">20</span> <span class="token number">17</span>:43:56 CST <span class="token number">2013</span>
rc.localThu Jun <span class="token number">20</span> <span class="token number">17</span>:45:21 CST <span class="token number">2013</span>
smartdThu Jun <span class="token number">20</span> <span class="token number">17</span>:45:21 CST <span class="token number">2013</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现smartd执行了两次，一次是在关机的时候，一次是在rc.local执行之后。rc.local不一定是最后一个执行的脚本，虽让rc.local中给出了如下注释：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>

<span class="token comment">#</span>
<span class="token comment"># This script will be executed *after* all the other init scripts.</span>
<span class="token comment"># You can put your own initialization stuff in here if you don&#39;t</span>
<span class="token comment"># want to do the full Sys V style init stuff.</span>

<span class="token function">touch</span> /var/lock/subsys/local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rc3.d中文件名为S开头时，传入的启动参数为start；rc3.d中文件名为S开头时，传入的启动参数为stop。系统先执行Kill脚本（以S开头），后执行start脚本（以S开始）。</p>`,22),p=[i];function c(r,o){return n(),a("div",null,p)}const m=s(t,[["render",c],["__file","2019041110.html.vue"]]);export{m as default};
