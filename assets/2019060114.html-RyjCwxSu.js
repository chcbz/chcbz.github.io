import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c as o,b as e,d as a,e as t,f as n}from"./app-5ZyUDSyM.js";const d="/assets/img-20230409212305-ExuyeLMY.png",p="/assets/img-20230409230310-vbP5Q4Yq.png",c={},h=n('<p>​</p><figure><img src="'+d+'" alt="HTTPS" tabindex="0" loading="lazy"><figcaption>HTTPS</figcaption></figure><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><h3 id="http-https-是什么" tabindex="-1"><a class="header-anchor" href="#http-https-是什么" aria-hidden="true">#</a> HTTP/HTTPS 是什么?</h3><p>简单来说，HTTP 是一个传输网页内容的协议，比如我们浏览一个网页，网页上的文字、图片、 CSS 、 JS 等文件都是通过 HTTP 协议传输到我们的浏览器，然后被我们看到。因为 HTTP 是明文传输的，通过 HTTP 协议传输的内容很容易被偷看和篡改，为了安全（你肯定不想被人偷看或者篡改网页内容吧，比如网站银行密码什么的。）就为 HTTP 协议再加上了一层 SSL/TLS 安全协议，所以就有了 HTTPS 。</p><h3 id="ssl-tls-是什么" tabindex="-1"><a class="header-anchor" href="#ssl-tls-是什么" aria-hidden="true">#</a> SSL/TLS 是什么？</h3><p>SSL 是指安全套接字层（Secure Sockets Layer），内心纯洁的同学也可以理解为「带安全套的 HTTP」，因为带了安全套，所以当然会比较安全。TLS 是 传输层安全协议（Transport Layer Security），SSL 和 TLS 是同一个东西的不同阶段，理解为同一个东西也行，都是安全协议就对了。</p><h3 id="为什么要部署-https" tabindex="-1"><a class="header-anchor" href="#为什么要部署-https" aria-hidden="true">#</a> 为什么要部署 HTTPS？</h3><p>说到底，就是 HTTPS 更安全。甚至为了安全，一个专业可靠的网站， HTTPS 是必须的。 Firefox 和 Chrome 都计划将没有配置 SSL 加密的 HTTP 网站标记为不安全，目前它们也正在联合其他相关的基金会与公司推动整个互联网 HTTPS 化，现在大家访问的一些主要的网站。如 Google 多年前就已经全部启用 HTTPS ，国内的淘宝、搜狗、知乎、百度等等也全面 HTTPS 了。甚至 Google 和百度的搜索结果也正在给予 HTTPS 的网站更高的排名和优先收录权。</p><h3 id="怎么部署-https-呢" tabindex="-1"><a class="header-anchor" href="#怎么部署-https-呢" aria-hidden="true">#</a> 怎么部署 HTTPS 呢？</h3><p>你只需要有一张被信任的 CA （ Certificate Authority ）也就是证书授权中心颁发的 SSL 安全证书，并且将它部署到你的网站服务器上。一旦部署成功后，当用户访问你的网站时，浏览器会在显示的网址前加一把小绿锁，表明这个网站是安全的，当然同时你也会看到网址前的前缀变成了 HTTPS ，不再是 HTTP 了。</p><h3 id="怎么获得-ssl-安全证书呢" tabindex="-1"><a class="header-anchor" href="#怎么获得-ssl-安全证书呢" aria-hidden="true">#</a> 怎么获得 SSL 安全证书呢？</h3><p>理论上，我们自己也可以签发 SSL 安全证书，但是我们自己签发的安全证书不会被主流的浏览器信任，所以我们需要被信任的证书授权中心（ CA ）签发的安全证书。而一般的 SSL 安全证书签发服务都比较贵，比如 Godaddy 、 GlobalSign 等机构签发的证书一般都需要20美金一年甚至更贵，不过为了加快推广 HTTPS 的普及， EEF 电子前哨基金会、 Mozilla 基金会和美国密歇根大学成立了一个公益组织叫 ISRG （ Internet Security Research Group ），这个组织从 2015 年开始推出了 Let’s Encrypt 免费证书。这个免费证书不仅免费，而且还相当好用，所以我们就可以利用 Let’s Encrypt 提供的免费证书部署 HTTPS 了。</p><h3 id="let-s-encrypt-简介" tabindex="-1"><a class="header-anchor" href="#let-s-encrypt-简介" aria-hidden="true">#</a> Let’s Encrypt 简介</h3><p>前面已经介绍过， Let’s Encrypt 是 一个叫 ISRG （ Internet Security Research Group ，互联网安全研究小组）的组织推出的免费安全证书计划。参与这个计划的组织和公司可以说是互联网顶顶重要的先驱，除了前文提到的三个牛气哄哄的发起单位外，后来又有思科（全球网络设备制造商执牛耳者）、 Akamai 加入，甚至连 Linux 基金会也加入了合作，这些大牌组织的加入保证了这个项目的可信度和可持续性。</p><h3 id="certbot-简介" tabindex="-1"><a class="header-anchor" href="#certbot-简介" aria-hidden="true">#</a> Certbot 简介</h3><p>ISRG 的发起者 EFF （电子前哨基金会）为 Let’s Encrypt 项目发布了一个官方的客户端 Certbot ，利用它可以完全自动化的获取、部署和更新安全证书。虽然第三方工具也可以使用，但是官方工具更权威，风险也更小，而且遇到问题也更容易解决，毕竟有官方的支持。</p><h2 id="弱交互申请流程" tabindex="-1"><a class="header-anchor" href="#弱交互申请流程" aria-hidden="true">#</a> 弱交互申请流程</h2><p>按照常规的的certbot申请流程，需要填写邮箱地址，还需要根据流程提示去DNS服务器设置相应的TXT，虽然并不复杂，可是懒人多做一步都觉得繁琐。度娘了一下，发现已经有高手解决了这个问题，果然是比你懒的人比你还聪明。</p>',19),u={href:"https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},m=n(`<h3 id="_1-下载" tabindex="-1"><a class="header-anchor" href="#_1-下载" aria-hidden="true">#</a> 1.下载</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au

<span class="token builtin class-name">cd</span> certbot-letencrypt-wildcardcertificates-alydns-au

<span class="token function">chmod</span> 0777 au.sh 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2.配置</h3><h4 id="_2-1-dns-api-密钥" tabindex="-1"><a class="header-anchor" href="#_2-1-dns-api-密钥" aria-hidden="true">#</a> 2.1. DNS API 密钥</h4>`,4),b={href:"http://au.sh",target:"_blank",rel:"noopener noreferrer"},g=n(`<ul><li><p>ALY_KEY 和 ALY_TOKEN：阿里云 API key 和 Secrec 官方申请文档。</p></li><li><p>TXY_KEY 和 TXY_TOKEN：腾讯云 API 密钥官方申请文档。</p></li><li><p>GODADDY_KEY 和 GODADDY_TOKEN：GoDaddy API 密钥官方申请文档。</p></li></ul><h4 id="_2-2-选择运行环境" tabindex="-1"><a class="header-anchor" href="#_2-2-选择运行环境" aria-hidden="true">#</a> 2.2 选择运行环境</h4><p>目前该工具支持五种运行环境和场景，通过 hook 文件和参数来调用：</p><ul><li><p>PHP(&gt;4以上版本均可)</p><ul><li><p><code>au.sh php aly add/clean</code>：表示选择PHP命令行，操作阿里云DNS，增加/清空DNS。</p></li><li><p><code>au.sh php txy add/clean</code>：表示选择PHP命令行，操作腾讯云DNS，增加/清空DNS。</p></li><li><p><code>au.sh php godaddy add/clean</code>：表示选择PHP命令行，操作GoDaddy DNS，增加/清空DNS。</p></li></ul></li><li><p>Python(支持2.7和3.7版本)</p><ul><li><p><code>au.sh python aly add/clean</code>：表示选择Python命令行，操作阿里云DNS，增加/清空DNS。</p></li><li><p><code>au.sh python txy add/clean</code>：表示选择Python命令行，操作腾讯云DNS，增加/清空DNS。(需要安装第三方库，pip install requests 或 pip3 install requests，后续我会优化使用python内建库)</p></li></ul></li></ul><p>根据自己服务器环境和域名服务商选择任意一个 hook shell（包含相应参数），具体使用见下面。</p><h4 id="_2-3-申请证书" tabindex="-1"><a class="header-anchor" href="#_2-3-申请证书" aria-hidden="true">#</a> 2.3 申请证书</h4><p>测试是否有错误：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto certonly  <span class="token parameter variable">-d</span> *.example.com <span class="token parameter variable">--manual</span> --preferred-challenges dns --dry-run  --manual-auth-hook <span class="token string">&quot;/脚本目录/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/脚本目录/au.sh php aly clean&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Debug</strong>： 操作 DNS API 可能会遇到一系列问题，比如 API token 权限不足，遇到相关问题，可以查看 /var/log/certd.log。</p><p><strong>重要解释</strong>： --manual-auth-hook 和 --manual-cleanup-hook 有三个参数：</p><ul><li><p>第一个代表你要选择那种语言(php/python)</p></li><li><p>第二个参数代表你的DNS厂商(aly/txy)</p></li><li><p>第三个参数是固定的(--manual-auth-hook中用add，--manual-clean-hook中用clean)</p></li></ul><p>比如你要选择Python环境，可以将 --manual-auth-hook 输入修改为 &quot;/脚本目录/au.sh python aly add&quot;，--manual-cleanup-hook 输入修改为 &quot;/脚本目录/au.sh python aly clean&quot;</p><p>确认无误后，实际运行（去除 --dry-run 参数）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 实际申请</span>
./certbot-auto certonly  <span class="token parameter variable">-d</span> *.example.com <span class="token parameter variable">--manual</span> --preferred-challenges dns --manual-auth-hook <span class="token string">&quot;/脚本目录/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/脚本目录/au.sh php aly clean&quot;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数解释（可以不用关心）：</p><ul><li><p><strong>certonly</strong>：表示采用验证模式，只会获取证书，不会为web服务器配置证书</p></li><li><p><strong>--manual</strong>：表示插件</p></li><li><p><strong>--preferred-challenges dns</strong>：表示采用DNS验证申请者合法性（是不是域名的管理者）</p></li><li><p><strong>--dry-run</strong>：在实际申请/更新证书前进行测试，强烈推荐</p></li><li><p><strong>-d</strong>：表示需要为那个域名申请证书，可以有多个。</p></li><li><p><strong>--manual-auth-hook</strong>：在执行命令的时候调用一个 hook 文件</p></li><li><p><strong>--manual-cleanup-hook</strong>：清除 DNS 添加的记录</p></li></ul><p>如果你想为多个域名申请通配符证书（合并在一张证书中，也叫做 <strong>SAN 通配符证书</strong>），直接输入多个 -d 参数即可，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto certonly  <span class="token parameter variable">-d</span> *.example.com <span class="token parameter variable">-d</span> *.example.org <span class="token parameter variable">-d</span> www.example.cn  <span class="token parameter variable">--manual</span> --preferred-challenges dns  --dry-run --manual-auth-hook <span class="token string">&quot;/脚本目录/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/脚本目录/au.sh php aly clean&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="续期证书" tabindex="-1"><a class="header-anchor" href="#续期证书" aria-hidden="true">#</a> 续期证书</h3><h4 id="_1-对机器上所有证书-renew" tabindex="-1"><a class="header-anchor" href="#_1-对机器上所有证书-renew" aria-hidden="true">#</a> 1. 对机器上所有证书 renew</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto renew  <span class="token parameter variable">--manual</span> --preferred-challenges dns --manual-auth-hook <span class="token string">&quot;/脚本目录/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/脚本目录/au.sh php aly clean&quot;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-对某一张证书进行续期" tabindex="-1"><a class="header-anchor" href="#_2-对某一张证书进行续期" aria-hidden="true">#</a> 2. 对某一张证书进行续期</h4><p>先看看机器上有多少证书：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto certificates
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到很多证书，如图：</p><figure><img src="`+p+'" alt="证书" tabindex="0" loading="lazy"><figcaption>证书</figcaption></figure>',26),v={href:"http://simplehttps.com",target:"_blank",rel:"noopener noreferrer"},k=n(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook <span class="token string">&quot;/脚本目录/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/脚本目录/au.sh php aly clean&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="加入-crontab" tabindex="-1"><a class="header-anchor" href="#加入-crontab" aria-hidden="true">#</a> 加入 crontab</h3><p>编辑文件 /etc/crontab :</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#证书有效期&lt;30天才会renew，所以crontab可以配置为1天或1周</span>
<span class="token number">1</span> <span class="token number">1</span> */1 * * root certbot-auto renew <span class="token parameter variable">--manual</span> --preferred-challenges dns  --manual-auth-hook <span class="token string">&quot;/脚本目录/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/脚本目录/au.sh php aly clean&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是certbot 机器和运行web服务（比如 nginx，apache）的机器是同一台，那么成功renew证书后，可以启动对应的web 服务器，运行下列crontab :</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 注意只有成功renew证书，才会重新启动nginx</span>
<span class="token number">1</span> <span class="token number">1</span> */1 * * root certbot-auto renew <span class="token parameter variable">--manual</span> --preferred-challenges dns -deploy-hook  <span class="token string">&quot;service nginx restart&quot;</span> --manual-auth-hook <span class="token string">&quot;/脚本目录/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/脚本目录/au.sh php aly clean&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：只有单机建议这样运行，如果要将证书同步到多台web服务器，需要有别的方案。</strong></p><h2 id="无交互申请流程" tabindex="-1"><a class="header-anchor" href="#无交互申请流程" aria-hidden="true">#</a> 无交互申请流程</h2><p>虽然已经能省去了去DNS服务器修改TXT记录的操作步骤了，大大地偷懒了一回，可是，还是得输入个邮箱，还得回答几个根本不关心的问题，实在是鸡肋。后来查了下certbot的官方文档，其实人家已经做得非常完善了，绝对支持这种操作，只要增加--non-interactive --agree-tos --register-unsafely-without-email三个参数即可实现全自动化。最后优化了脚本，并放到服务器上，只要执行一下命令，即可全自动注册HTTPS证书。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-S</span> <span class="token parameter variable">-L</span> https://install.wydiy.com/shell/https_install.sh <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;mydomain.com&quot;</span> aly apikey apitoken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中mydomain.com是域名，aly是云平台，还包括txy和gdd，apikey和apitoken自己在云平台找。</p>`,11);function y(S,T){const s=l("ExternalLinkIcon");return i(),o("div",null,[h,e("p",null,[a("具体步骤如下：（来源于："),e("a",u,[a("https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au）"),t(s)])]),m,e("p",null,[a("这个 API 密钥什么意思呢？由于需要通过 API 操作阿里云 DNS 或腾讯云 DNS 的记录，所以需要去域名服务商哪儿获取 API 密钥，然后配置在 "),e("a",b,[a("au.sh"),t(s)]),a(" 文件中:")]),g,e("p",null,[a("记住证书名，比如 "),e("a",v,[a("simplehttps.com"),t(s)]),a("，然后运行下列命令 renew：")]),k])}const x=r(c,[["render",y],["__file","2019060114.html.vue"]]);export{x as default};
