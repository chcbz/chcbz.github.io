import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as t,f as n}from"./app-5ZyUDSyM.js";const a="/assets/img-20230409210451-eshIeLnV.png",i={},r=n('<p>â€‹</p><figure><img src="'+a+`" alt="Linux boot process" tabindex="0" loading="lazy"><figcaption>Linux boot process</figcaption></figure><p>The main process of Centos booting is as follows:</p><ol><li><p>Find the system boot partition, execute the boot program, and load the kernel</p></li><li><p>Execute the init program</p><p>a. /etc/rc.d/rc.sysinit # The first script executed by init</p><p>b. /etc/rc.d/rc $RUNLEVEL # $RUNLEVEL is the default running mode, and the running level of the server is 3</p><p>c. /etc/rc.d/rc.local #After the corresponding level of service is started, execute the file (in fact, you can also write the commands that need to be executed into the file)</p><p>d. /sbin/mingetty # Wait for user login</p></li></ol><p>In Redhat/Centos, /etc/rc.d/rc.sysinit mainly does the same initialization work in each operating mode, including:</p><ul><li><p>Import keymap and system fonts</p></li><li><p>start swapping</p></li><li><p>set hostname</p></li><li><p>Set NIS domain name</p></li><li><p>Check (fsck) and mount the file system</p></li><li><p>open quota</p></li><li><p>Load sound card modules, set system clock, etc.</p></li></ul><p>/etc/rc.d/rc executes the scripts in the corresponding directory according to the operation mode specified by its parameters (operation level, which you can set in the inittab file). Those starting with Kxx are called with stop as a parameter; all things starting with Sxx are called with start as a parameter. The order of calling is executed according to xx from small to large. (where xx is a number, indicating the startup sequence) For example, assuming that the default operating mode is 3, /etc/rc.d/rc will call the /etc/rc.d/rc3.d/ under the above method script.</p><p>It is worth mentioning that the running modes 2, 3, and 5 in Redhat/Centos all use /etc/rc.d/rc.local as the last one in the initialization script, so users can add some required After other initialization work, log the command executed before. (This question is raised, see the following: rc.local is not necessarily the last executed script)</p><blockquote><p>rwxrwxrwx 1 root root 11 Apr 12 14:26 S99local -&gt; ../rc.local</p></blockquote><p>After init waits for /etc/rc.d/rc to be executed (because the action of /etc/rc.d/rc in /etc/inittab is wait), it will run /sbin/mingetty on each specified virtual terminal, Wait for the user to log in. At this point, the startup of LINUX is over.</p><p>The Linux system has 7 operating levels, and their respective meanings are:</p><ul><li><p>Level 0 shut down the system</p></li><li><p>Level 1 single user mode</p></li><li><p>Level 2 multi-user mode without network</p></li><li><p>Level 3 with networked multi-user mode</p></li><li><p>Level 4 System Reserved</p></li><li><p>Level 5 multi-user mode with network and graphics</p></li><li><p>Level 6 reboot system</p></li></ul><p>In centos, rc.local should not be the last startup script.</p><p>The centos operation level is 3, and there are two files, S99local and S99smartd, in /etc/rc3.d.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">11</span> Apr <span class="token number">12</span> <span class="token number">14</span>:26 S99local -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/rc.local
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">16</span> Apr <span class="token number">12</span> <span class="token number">14</span>:26 S99smartd -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/init.d/smartd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>According to the startup rules (the sequence of startup is related to the number after the file name S, the larger the number, the later the startup sequence), rc.local is executed before smartd. In order to verify this conjecture, add the following to the two scripts respectively the two statements of</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;rc.local&quot;</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span> <span class="token operator">&gt;&gt;</span> /test
<span class="token builtin class-name">echo</span> <span class="token string">&quot;smartd&quot;</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span><span class="token operator">&gt;&gt;</span> /test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>/test results are:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>smartdThu Jun <span class="token number">20</span> <span class="token number">17</span>:43:56 CST <span class="token number">2013</span>
rc.localThu Jun <span class="token number">20</span> <span class="token number">17</span>:45:21 CST <span class="token number">2013</span>
smartdThu Jun <span class="token number">20</span> <span class="token number">17</span>:45:21 CST <span class="token number">2013</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It can be found that smartd is executed twice, once when shutting down, and once after rc.local is executed. rc.local is not necessarily the last executed script, although the following comments are given in rc.local:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>

<span class="token comment">#</span>
<span class="token comment"># This script will be executed *after* all the other init scripts.</span>
<span class="token comment"># You can put your own initialization stuff in here if you don&#39;t</span>
<span class="token comment"># want to do the full Sys V style init stuff.</span>

<span class="token function">touch</span> /var/lock/subsys/local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the file name in rc3.d starts with S, the startup parameter passed in is start; when the file name in rc3.d starts with S, the startup parameter passed in is stop. The system executes the kill script (starting with S) first, and then executes the start script (starting with S).</p>`,22),l=[r];function o(c,p){return s(),t("div",null,l)}const h=e(i,[["render",o],["__file","2019041110.html.vue"]]);export{h as default};
