import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as s,c,b as a,d as e,e as n,f as i}from"./app-5ZyUDSyM.js";const l="/assets/img-20230409212305-ExuyeLMY.png",d="/assets/img-20230409230310-vbP5Q4Yq.png",h={},p=i('<p>​</p><figure><img src="'+l+'" alt="HTTPS" tabindex="0" loading="lazy"><figcaption>HTTPS</figcaption></figure><h2 id="preface" tabindex="-1"><a class="header-anchor" href="#preface" aria-hidden="true">#</a> Preface</h2><h3 id="what-is-http-https" tabindex="-1"><a class="header-anchor" href="#what-is-http-https" aria-hidden="true">#</a> What is HTTP/HTTPS?</h3><p>To put it simply, HTTP is a protocol for transmitting web page content. For example, when we browse a web page, the text, pictures, CSS, JS and other files on the web page are all transmitted to our browser through the HTTP protocol, and then we can see it. Because HTTP is transmitted in clear text, the content transmitted through the HTTP protocol is easy to be peeped and tampered with. For security (you definitely don’t want to be peeked or tampered with the content of the webpage, such as the website bank password or something.) Then for the HTTP protocol Added a layer of SSL/TLS security protocol, so there is HTTPS.</p><h3 id="what-is-ssl-tls" tabindex="-1"><a class="header-anchor" href="#what-is-ssl-tls" aria-hidden="true">#</a> What is SSL/TLS?</h3><p>SSL refers to Secure Sockets Layer (Secure Sockets Layer). Students with a pure heart can also understand it as &quot;HTTP with a condom&quot;. Because of the condom, it is of course safer. TLS is a Transport Layer Security protocol (Transport Layer Security). SSL and TLS are different stages of the same thing. It can be understood as the same thing, as long as they are both security protocols.</p><h3 id="why-deploy-https" tabindex="-1"><a class="header-anchor" href="#why-deploy-https" aria-hidden="true">#</a> Why deploy HTTPS?</h3><p>After all, HTTPS is more secure. Even for security, a professional and reliable website, HTTPS is a must. Both Firefox and Chrome plan to mark HTTP websites that do not configure SSL encryption as insecure, and they are currently working with other related foundations and companies to promote the HTTPSization of the entire Internet, and some of the major websites that everyone visits now. For example, Google has fully enabled HTTPS many years ago, and domestic Taobao, Sogou, Zhihu, Baidu, etc. have also fully enabled HTTPS. Even Google and Baidu&#39;s search results are giving higher rankings and priority to HTTPS websites.</p><h3 id="how-to-deploy-https" tabindex="-1"><a class="header-anchor" href="#how-to-deploy-https" aria-hidden="true">#</a> How to deploy HTTPS?</h3><p>You only need to have an SSL security certificate issued by a trusted CA (Certificate Authority), that is, a certificate authority, and deploy it on your website server. Once the deployment is successful, when the user visits your website, the browser will add a small green lock in front of the URL displayed, indicating that the website is safe. Of course, you will also see that the prefix in front of the URL has changed to HTTPS , no longer HTTP.</p><h3 id="how-to-get-ssl-security-certificate" tabindex="-1"><a class="header-anchor" href="#how-to-get-ssl-security-certificate" aria-hidden="true">#</a> How to get SSL security certificate?</h3><p>In theory, we can also issue SSL security certificates ourselves, but the security certificates we issue ourselves will not be trusted by mainstream browsers, so we need security certificates issued by a trusted certificate authority (CA). The general SSL security certificate issuance services are relatively expensive. For example, certificates issued by Godaddy, GlobalSign and other organizations generally cost $20 a year or more. However, in order to accelerate the popularization of HTTPS, EEF Electronic Frontier Foundation, Mozilla Foundation and The University of Michigan established a non-profit organization called ISRG (Internet Security Research Group), which has launched Let&#39;s Encrypt free certificates since 2015. This free certificate is not only free, but also quite easy to use, so we can use the free certificate provided by Let’s Encrypt to deploy HTTPS.</p><h3 id="introduction-to-let-s-encrypt" tabindex="-1"><a class="header-anchor" href="#introduction-to-let-s-encrypt" aria-hidden="true">#</a> Introduction to Let’s Encrypt</h3><p>As mentioned earlier, Let’s Encrypt is a free security certificate program launched by an organization called ISRG (Internet Security Research Group, Internet Security Research Group). The organizations and companies participating in this plan can be said to be the most important pioneers of the Internet. In addition to the three aggressive initiators mentioned above, Cisco (the leader of the global network equipment manufacturer), Akamai, and even Even the Linux Foundation has joined the cooperation, and the participation of these big-name organizations ensures the credibility and sustainability of this project.</p><h3 id="introduction-to-certbot" tabindex="-1"><a class="header-anchor" href="#introduction-to-certbot" aria-hidden="true">#</a> Introduction to Certbot</h3><p>EFF (Electronic Frontier Foundation), the initiator of ISRG, released an official client Certbot for the Let’s Encrypt project, which can be used to fully automate the acquisition, deployment and renewal of security certificates. Although third-party tools can also be used, official tools are more authoritative, less risky, and easier to solve problems encountered, after all, there is official support.</p><h2 id="weak-interaction-application-process" tabindex="-1"><a class="header-anchor" href="#weak-interaction-application-process" aria-hidden="true">#</a> Weak interaction application process</h2><p>According to the conventional certbot application process, you need to fill in the email address, and you need to go to the DNS server to set the corresponding TXT according to the process prompts. Although it is not complicated, it is cumbersome for lazy people to do one more step. Du Niang took a moment and found that some experts have already solved this problem. It turns out that people who are lazy than you are smarter than you.</p>',19),u={href:"https://github.com/ywdblog/certbot-letsencrypt-wildcardcertificates-alydns-au)",target:"_blank",rel:"noopener noreferrer"},m=i(`<h3 id="_1-download" tabindex="-1"><a class="header-anchor" href="#_1-download" aria-hidden="true">#</a> 1. Download</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/ywdblog/certbot-letsencrypt-wildcardcertificates-alydns-au

<span class="token builtin class-name">cd</span> certbot-letsencrypt-wildcardcertificates-alydns-au

<span class="token function">chmod</span> 0777 au.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-configuration" tabindex="-1"><a class="header-anchor" href="#_2-configuration" aria-hidden="true">#</a> 2. Configuration</h3><h4 id="_2-1-dns-api-key" tabindex="-1"><a class="header-anchor" href="#_2-1-dns-api-key" aria-hidden="true">#</a> 2.1. DNS API Key</h4>`,4),f={href:"http://au.sh",target:"_blank",rel:"noopener noreferrer"},g=i(`<ul><li><p>ALY_KEY and ALY_TOKEN: Alibaba Cloud API key and Secret official application documents.</p></li><li><p>TXY_KEY and TXY_TOKEN: Tencent Cloud API key official application documents.</p></li><li><p>GODADDY_KEY and GODADDY_TOKEN: GoDaddy API key official application documents.</p></li></ul><h4 id="_2-2-select-the-operating-environment" tabindex="-1"><a class="header-anchor" href="#_2-2-select-the-operating-environment" aria-hidden="true">#</a> 2.2 Select the operating environment</h4><p>Currently, the tool supports five operating environments and scenarios, which are invoked through hook files and parameters:</p><ul><li><p>PHP (&gt;4 and above versions are acceptable)</p><ul><li><p><code>au.sh php aly add/clean</code>: Indicates selecting the PHP command line, operating Alibaba Cloud DNS, and adding/clearing DNS.</p></li><li><p><code>au.sh php txy add/clean</code>: Indicates selecting the PHP command line, operating Tencent Cloud DNS, and adding/clearing DNS.</p></li><li><p><code>au.sh php godaddy add/clean</code>: Indicates selecting the PHP command line, operating GoDaddy DNS, and adding/clearing DNS.</p></li></ul></li><li><p>Python (versions 2.7 and 3.7 are supported)</p><ul><li><p><code>au.sh python aly add/clean</code>: Indicates selecting the Python command line, operating Alibaba Cloud DNS, and adding/clearing DNS.</p></li><li><p><code>au.sh python txy add/clean</code>: Indicates selecting the Python command line, operating Tencent Cloud DNS, and adding/clearing DNS. (Need to install third-party libraries, pip install requests or pip3 install requests, I will optimize the use of python built-in libraries later)</p></li></ul></li></ul><p>Choose any hook shell (including corresponding parameters) according to your server environment and domain name service provider. See below for specific usage.</p><h4 id="_2-3-apply-for-a-certificate" tabindex="-1"><a class="header-anchor" href="#_2-3-apply-for-a-certificate" aria-hidden="true">#</a> 2.3 Apply for a certificate</h4><p>Test for errors:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto certonly <span class="token parameter variable">-d</span> *.example.com <span class="token parameter variable">--manual</span> --preferred-challenges dns --dry-run --manual-auth-hook <span class="token string">&quot;/script directory/au.sh php aly add&quot;</span> --manual- cleanup-hook <span class="token string">&quot;/script directory/au.sh php aly clean&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Debug</strong>: You may encounter a series of problems when operating the DNS API, such as insufficient API token permissions. If you encounter related problems, you can check /var/log/certd.log.</p><p><strong>Important Explanation</strong>: --manual-auth-hook and --manual-cleanup-hook have three parameters:</p><ul><li><p>The first one represents the language you want to choose (php/python)</p></li><li><p>The second parameter represents your DNS vendor (aly/txy)</p></li><li><p>The third parameter is fixed (use add in --manual-auth-hook, use clean in --manual-clean-hook)</p></li></ul><p>For example, if you want to choose a Python environment, you can change the --manual-auth-hook input to &quot;/script directory/au.sh python aly add&quot;, --manual-cleanup-hook input to &quot;/script directory/au.sh python aly clean&quot;</p><p>After confirming that it is correct, actually run it (remove the --dry-run parameter):</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># actual application</span>
./certbot-auto certonly <span class="token parameter variable">-d</span> *.example.com <span class="token parameter variable">--manual</span> --preferred-challenges dns --manual-auth-hook <span class="token string">&quot;/script directory/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/ script directory/au.sh php aly clean&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Parameter explanation (you don&#39;t need to care about it):</p><ul><li><p><strong>certonly</strong>: Indicates that the verification mode is adopted, only the certificate will be obtained, and the certificate will not be configured for the web server</p></li><li><p><strong>--manual</strong>: Indicates the plugin</p></li><li><p><strong>--preferred-challenges dns</strong>: Indicates that DNS is used to verify the legitimacy of the applicant (whether it is the manager of the domain name)</p></li><li><p><strong>--dry-run</strong>: test before actually applying for/renewing the certificate, strongly recommended</p></li><li><p><strong>-d</strong>: Indicates that you need to apply for a certificate for that domain name, there can be more than one.</p></li><li><p><strong>--manual-auth-hook</strong>: call a hook file when executing the command</p></li><li><p><strong>--manual-cleanup-hook</strong>: Clear DNS added records</p></li></ul><p>If you want to apply for a wildcard certificate for multiple domain names (combined into one certificate, also called <strong>SAN wildcard certificate</strong>), just enter multiple -d parameters directly, for example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto certonly <span class="token parameter variable">-d</span> *.example.com <span class="token parameter variable">-d</span> *.example.org <span class="token parameter variable">-d</span> www.example.cn <span class="token parameter variable">--manual</span> --preferred-challenges dns --dry-run --manual-auth-hook <span class="token string">&quot;/ script directory/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/script directory/au.sh php aly clean&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="renew-certificate" tabindex="-1"><a class="header-anchor" href="#renew-certificate" aria-hidden="true">#</a> Renew Certificate</h3><h4 id="_1-renew-all-certificates-on-the-machine" tabindex="-1"><a class="header-anchor" href="#_1-renew-all-certificates-on-the-machine" aria-hidden="true">#</a> 1. Renew all certificates on the machine</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto renew <span class="token parameter variable">--manual</span> --preferred-challenges dns --manual-auth-hook <span class="token string">&quot;/script directory/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/script directory/au.sh php aly clean&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-renew-a-certificate" tabindex="-1"><a class="header-anchor" href="#_2-renew-a-certificate" aria-hidden="true">#</a> 2. Renew a certificate</h4><p>First look at how many certificates are on the machine:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto certificates
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can see many certificates, as shown in the figure:</p><figure><img src="`+d+'" alt="Certificate" tabindex="0" loading="lazy"><figcaption>Certificate</figcaption></figure>',26),y={href:"http://simplehttps.com",target:"_blank",rel:"noopener noreferrer"},b=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./certbot-auto renew --cert-name simplehttps.com --manual-auth-hook <span class="token string">&quot;/script directory/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/script directory/au.sh php aly clean&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="join-crontab" tabindex="-1"><a class="header-anchor" href="#join-crontab" aria-hidden="true">#</a> Join crontab</h3><p>Edit the file /etc/crontab :</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#Certificate validity period &lt; 30 days will be renewed, so crontab can be configured as 1 day or 1 week</span>
<span class="token number">1</span> <span class="token number">1</span> */1 * * root certbot-auto renew <span class="token parameter variable">--manual</span> --preferred-challenges dns --manual-auth-hook <span class="token string">&quot;/script directory/au.sh php aly add&quot;</span> --manual-cleanup-hook <span class="token string">&quot;/script directory/au.sh php aly clean&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If the certbot machine is the same as the machine running web services (such as nginx, apache), then after successfully renewing the certificate, you can start the corresponding web server and run the following crontab:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Note that nginx will only be restarted if the certificate is successfully renew</span>
<span class="token number">1</span> <span class="token number">1</span> */1 * * root certbot-auto renew <span class="token parameter variable">--manual</span> --preferred-challenges dns -deploy-hook <span class="token string">&quot;service nginx restart&quot;</span> --manual-auth-hook <span class="token string">&quot;/script directory/au.sh php aly add&quot;</span> - -manual-cleanup-hook <span class="token string">&quot;/script directory/au.sh php aly clean&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note: Only a single machine is recommended to run in this way. If you want to synchronize the certificate to multiple web servers, you need another solution.</strong></p><h2 id="no-interactive-application-process" tabindex="-1"><a class="header-anchor" href="#no-interactive-application-process" aria-hidden="true">#</a> No interactive application process</h2><p>Although I can already save the operation steps of going to the DNS server to modify the TXT record, I have been lazy for a while, but I still have to enter an email address and answer a few questions that I don’t care about at all, which is really tasteless. Later, I checked the official documentation of certbot. In fact, they have done a very perfect job and absolutely support this kind of operation. Just add three parameters --non-interactive --agree-tos --register-unsafely-without-email Realize full automation. Finally, the script is optimized and placed on the server. Just execute a command to automatically register the HTTPS certificate.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-S</span> <span class="token parameter variable">-L</span> https://install.wydiy.com/shell/https_install.sh <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;mydomain.com&quot;</span> aly apikey apitoken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),v={href:"http://mydomain.com",target:"_blank",rel:"noopener noreferrer"};function w(k,S){const t=o("ExternalLinkIcon");return s(),c("div",null,[p,a("p",null,[e("The specific steps are as follows: (Source: "),a("a",u,[e("https://github.com/ywdblog/certbot-letsencrypt-wildcardcertificates-alydns-au)"),n(t)])]),m,a("p",null,[e("What does this API key mean? Since the records of Alibaba Cloud DNS or Tencent Cloud DNS need to be operated through the API, it is necessary to obtain the API key from the domain name service provider, and then configure it in the "),a("a",f,[e("au.sh"),n(t)]),e(" file:")]),g,a("p",null,[e("Remember the certificate name, such as "),a("a",y,[e("simplehttps.com"),n(t)]),e(", and run the following command to renew:")]),b,a("p",null,[e("Among them, "),a("a",v,[e("mydomain.com"),n(t)]),e(" is the domain name, aly is the cloud platform, including txy and gdd, apikey and apitoken can be found on the cloud platform.")])])}const _=r(h,[["render",w],["__file","2019060114.html.vue"]]);export{_ as default};
