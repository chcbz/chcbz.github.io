import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c,b as n,d as s,e as t,f as l}from"./app-5ZyUDSyM.js";const i="/assets/img-20230409101309-cHbgmz49.gif",u="/assets/img-20230409105133-VUzoR9K9.png",r="/assets/img-20230409105244-ZBNAw-ZE.png",k="/assets/img-20230409110208-vSzAKXxL.png",d="/assets/img-20230409110233-EwrgXxZn.png",m="/assets/img-20230409112903-lzYKv-zx.png",v="/assets/img-20230409113014-vncJ8ZyI.png",b="/assets/img-20230409113036-PrNu9xCR.png",g={},f=l(`<p>​</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>本文主要通过一个简单的 Demo 介绍 TensorFlow 初级 API 的使用方法，因为自己也是初学者，因此本文的目的主要是引导刚接触 TensorFlow 或者 机器学习的同学，能够从第一步开始学习 TensorFlow。阅读本文先确认具备以下基础技能：</p><ul><li><p>会使用 Python 编程（初级就OK，其实 TensorFlow 也支持 Java、C++、Go）</p></li><li><p>一些数组相关的知识（线性代数没忘干净就行）</p></li><li><p>最好再懂点机器学习相关的知识（临时百度、Google也来得及）</p></li></ul><h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h2><h3 id="张量-tensor" tabindex="-1"><a class="header-anchor" href="#张量-tensor" aria-hidden="true">#</a> 张量（Tensor）</h3><p>TensorFlow 内部的计算都是基于张量的，因此我们有必要先对张量有个认识。张量是在我们熟悉的标量、向量之上定义的，详细的定义比较复杂，我们可以先简单的将它理解为一个多维数组：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>3                                       # 这个 0 阶张量就是标量，shape=[]
[1., 2., 3.]                            # 这个 1 阶张量就是向量，shape=[3]
[[1., 2., 3.], [4., 5., 6.]]            # 这个 2 阶张量就是二维数组，shape=[2, 3]
[[[1., 2., 3.]], [[7., 8., 9.]]]        # 这个 3 阶张量就是三维数组，shape=[2, 1, 3]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TensorFlow 内部使用 <code>tf.Tensor</code> 类的实例来表示张量，每个 <code>tf.Tensor</code> 有两个属性：</p><ul><li><p><em>dtype</em> Tensor 存储的数据的类型，可以为<code>tf.float32</code>、<code>tf.int32</code>、<code>tf.string</code>…</p></li><li><p><em>shape</em> Tensor 存储的多维数组中每个维度的数组中元素的个数，如上面例子中的shape</p></li></ul><p>我们现在可以敲几行代码看一下 Tensor 。在命令终端输入 python 或者 python3 启动一个 Python 会话，然后输入下面的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 引入 tensorflow 模块</span>
<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 创建一个整型常量，即 0 阶 Tensor</span>
t0 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>

<span class="token comment"># 创建一个浮点数的一维数组，即 1 阶 Tensor</span>
t1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">4.1</span><span class="token punctuation">,</span> <span class="token number">5.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建一个字符串的2x2数组，即 2 阶 Tensor</span>
t2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Potato&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tomato&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span>

<span class="token comment"># 创建一个 2x3x1 数组，即 3 阶张量，数据类型默认为整型</span>
t3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 打印上面创建的几个 Tensor</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的输出为，注意<code>shape</code>的类型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span>
Tensor<span class="token punctuation">(</span><span class="token string">&quot;Const:0&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
Tensor<span class="token punctuation">(</span><span class="token string">&quot;Const_1:0&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span>
Tensor<span class="token punctuation">(</span><span class="token string">&quot;Const_2:0&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>string<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>
Tensor<span class="token punctuation">(</span><span class="token string">&quot;Const_3:0&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>print 一个 Tensor 只能打印出它的属性定义，并不能打印出它的值，要想查看一个 Tensor 中的值还需要经过Session 运行一下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span> <span class="token number">3.</span>          <span class="token number">4.0999999</span>   <span class="token number">5.19999981</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">b&#39;Apple&#39;</span> <span class="token string">b&#39;Orange&#39;</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token string">b&#39;Potato&#39;</span> <span class="token string">b&#39;Tomato&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
 
 <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据流图-dataflow-graph" tabindex="-1"><a class="header-anchor" href="#数据流图-dataflow-graph" aria-hidden="true">#</a> 数据流图(Dataflow Graph)</h3><p>数据流是一种常用的并行计算编程模型，数据流图是由<code>节点(nodes)</code>和<code>线(edges)</code>构成的有向图：</p><ul><li><p><strong>节点(nodes)</strong> 表示计算单元，也可以是输入的起点或者输出的终点</p></li><li><p><strong>线(edges)</strong> 表示节点之间的输入/输出关系</p></li></ul><p>在 TensorFlow 中，每个节点都是用<code>tf.Tensor</code>的实例来表示的，即每个节点的输入、输出都是 Tensor，如下图中 Tensor 在 Graph 中的流动，形象的展示 TensorFlow 名字的由来</p><figure><img src="`+i+`" alt="Tensor 在 Graph 中的流动" tabindex="0" loading="lazy"><figcaption>Tensor 在 Graph 中的流动</figcaption></figure><p>TensorFlow 中的数据流图有以下几个优点：</p><ul><li><p><strong>可并行</strong> 计算节点之间有明确的线进行连接，系统可以很容易的判断出哪些计算操作可以并行执行</p></li><li><p><strong>可分发</strong> 图中的各个节点可以分布在不同的计算单元(CPU、 GPU、 TPU等)或者不同的机器中，每个节点产生的数据可以通过明确的线发送的下一个节点中</p></li><li><p><strong>可优化</strong> TensorFlow 中的 XLA 编译器可以根据数据流图进行代码优化，加快运行速度</p></li><li><p><strong>可移植</strong> 数据流图的信息可以不依赖代码进行保存，如使用Python创建的图，经过保存后可以在C++或Java中使用</p></li></ul><h3 id="sesssion" tabindex="-1"><a class="header-anchor" href="#sesssion" aria-hidden="true">#</a> Sesssion</h3><p>我们在Python中需要做一些计算操作时一般会使用NumPy，NumPy在做矩阵操作等复杂的计算的时候会使用其他语言(C/C++)来实现这些计算逻辑，来保证计算的高效性。但是频繁的在多个编程语言间切换也会有一定的耗时，如果只是单机操作这些耗时可能会忽略不计，但是如果在分布式并行计算中，计算操作可能分布在不同的CPU、GPU甚至不同的机器中，这些耗时可能会比较严重。<br> TensorFlow 底层是使用C++实现，这样可以保证计算效率，并使用<code>tf.Session</code>类来连接客户端程序与C++运行时。上层的Python、Java等代码用来设计、定义模型，构建的Graph，最后通过<code>tf.Session.run()</code>方法传递给底层执行。</p><h3 id="构建计算图" tabindex="-1"><a class="header-anchor" href="#构建计算图" aria-hidden="true">#</a> 构建计算图</h3><p>上面介绍的是 TensorFlow 和 Graph 的概念，下面介绍怎么用 Tensor 构建 Graph。<br> Tensor 即可以表示输入、输出的端点，还可以表示计算单元，如下的代码创建了对两个 Tensor 执行 + 操作的 Tensor：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 创建两个常量节点</span>
node1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">)</span>
node2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">4.8</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个 adder 节点，对上面两个节点执行 + 操作</span>
adder <span class="token operator">=</span> node1 <span class="token operator">+</span> node2

<span class="token comment"># 打印一下 adder 节点</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>adder<span class="token punctuation">)</span>

<span class="token comment"># 打印 adder 运行后的结果</span>
sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>adder<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面<code>print</code>的输出为：</p><blockquote><p>Tensor(&quot;add:0&quot;, shape=(), dtype=float32)<br> 8.0</p></blockquote><p>上面使用<code>tf.constant()</code>创建的 Tensor 都是常量，一旦创建后其中的值就不能改变了。有时我们还会需要从外部输入数据，这时可以用<code>tf.placeholder</code>创建占位 Tensor，占位 Tensor 的值可以在运行的时候输入。如下就是创建占位 Tensor 的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 创建两个占位 Tensor 节点</span>
a <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
b <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建一个 adder 节点，对上面两个节点执行 + 操作</span>
adder_node <span class="token operator">=</span> a <span class="token operator">+</span> b

<span class="token comment"># 打印三个节点</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>adder<span class="token punctuation">)</span>

<span class="token comment"># 运行一下，后面的 dict 参数是为占位 Tensor 提供输入数据</span>
sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>adder<span class="token punctuation">,</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">4.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>adder<span class="token punctuation">,</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的输出为：</p><blockquote><p>Tensor(&quot;Placeholder:0&quot;, dtype=float32)<br> Tensor(&quot;Placeholder_1:0&quot;, dtype=float32)<br> Tensor(&quot;add:0&quot;, dtype=float32)<br> 7.5<br> [ 3. 7.]</p></blockquote><p>我们还可以添加其他操作构建复杂的 Graph</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 添加×操作</span>
add_and_triple <span class="token operator">=</span> adder <span class="token operator">*</span> <span class="token number">3.</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>add_and_triple<span class="token punctuation">,</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">4.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的输出为</p><blockquote><p>22.5</p></blockquote><h2 id="tensorflow-应用实例" tabindex="-1"><a class="header-anchor" href="#tensorflow-应用实例" aria-hidden="true">#</a> TensorFlow 应用实例</h2><p>上面介绍了 TensorFlow 中的一些基本概念，下面我们通过一个小例子来了解一下怎么使用 TensorFlow 进行机器学习。</p><h3 id="建立模型-model" tabindex="-1"><a class="header-anchor" href="#建立模型-model" aria-hidden="true">#</a> 建立模型(Model)</h3><p>如下为我们进行某项实验获得的一些实验数据：</p><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>1</td><td>4.8</td></tr><tr><td>2</td><td>8.5</td></tr><tr><td>3</td><td>10.4</td></tr><tr><td>6</td><td>21</td></tr><tr><td>8</td><td>25.3</td></tr></tbody></table><p>我们将这些数据放到一个二维图上可以看的更直观一些，如下，这些数据在图中表现为一些离散的点：</p><figure><img src="`+u+'" alt="测试数据" tabindex="0" loading="lazy"><figcaption>测试数据</figcaption></figure><p>我们需要根据现有的这些数据归纳出一个通用模型，通过这个模型我们可以预测其他的输入值产生的输出值。<br> 如下图，我们选择的模型既可以是红线表示的鬼都看不懂的曲线模型，也可以是蓝线表示的线性模型，在概率统计理论的分析中，这两种模型符合真实模型的概率是一样的。</p><figure><img src="'+r+'" alt="假设模型" tabindex="0" loading="lazy"><figcaption>假设模型</figcaption></figure><p>根据<strong>奥卡姆剃刀原则-若有多个假设与观察一致，则选最简单的那个</strong>，蓝线表示的线性模型更符合我们的直观预期。<br> 如果用x表示输入，y表示输出，线性模型可以用下面的方程表示：</p><blockquote><p>$y = W \\times x + b$</p></blockquote><p>即使我们选择了直线模型，可以选择的模型也会有很多，如下图的三条直线都像是一种比较合理的模型，只是和参数不同。这时我们需要设计一个损失模型(loss model)，来评估一下哪个模型更合理一些，并找到一个最准确的模型。</p><figure><img src="'+k+'" alt="优化模型" tabindex="0" loading="lazy"><figcaption>优化模型</figcaption></figure><p>如下图每条黄线代表线性模型计算出来的值与实际输出值之间的差值:</p><figure><img src="'+d+`" alt="损失模型" tabindex="0" loading="lazy"><figcaption>损失模型</figcaption></figure><p>我们用$y\\prime$表示实验得到的实际输出，用下面的方程表示我们的损失模型：</p><blockquote><p>$loss=\\displaystyle\\sum_{n=1}<sup>N(y_n−y\\prime_n)</sup>2$</p></blockquote><p>显然，损失模型里得到的越小，说明我们的线性模型越准确。</p><h3 id="使用-tensorflow-实现模型" tabindex="-1"><a class="header-anchor" href="#使用-tensorflow-实现模型" aria-hidden="true">#</a> 使用 TensorFlow 实现模型</h3><p>上面我们根据实验数据建立了一个线性模型，并为这个线性模型设计了一个损失模型，下面介绍的是怎么在 TensorFlow 中实现我们设计的模型。<br> 在我们的线性模型 $y = W \\times x + b$ 中，输入$x$可以用占位 Tensor 表示，输出$y$可以用线性模型的输出表示，我们需要不断的改变$W$和$b$的值，来找到一个使最小的值。这里$W$和$b$可以用变量 Tensor 表示。使用<code>tf.Variable()</code>可以创建一个变量 Tensor，如下就是我们模型的实现代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 创建变量 W 和 b 节点，并设置初始值</span>
W <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建 x 节点，用来输入实验中的输入数据</span>
x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建线性模型</span>
linear_model <span class="token operator">=</span> W<span class="token operator">*</span>x <span class="token operator">+</span> b

<span class="token comment"># 创建 y 节点，用来输入实验中得到的输出数据，用于损失模型计算</span>
y <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建损失模型</span>
loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>linear_model <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 创建 Session 用来计算模型</span>
sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>tf.Variable()</code>创建变量 Tensor 时需要设置一个初始值，但这个初始值并不能立即使用，例如上面的代码中，我们使用<code>print(sess.run(W))</code>尝试打印<code>W</code>的值会得到下面提示未初始化的异常</p><blockquote><p>tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized value Variable</p></blockquote><p>变量 Tensor 需要经过下面的 <code>init</code> 过程后才能使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 初始化变量</span>
init <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>
sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这之后再使用<code>print(sess.run(W))</code>打印就可以看到我们之前赋的初始值：</p><blockquote><p>[ 0.1]</p></blockquote><p>变量初始化完之后，我们可以先用上面对<code>W</code>和<code>b</code>设置的初始值<code>0.1</code>和<code>-0.1</code>运行一下我们的线性模型看看结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>linear_model<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><blockquote><p>[ 0. 0.1 0.20000002 0.5 0.69999999]</p></blockquote><p>貌似与我们实验的实际输出差距很大，我们再运行一下损失模型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">10.4</span><span class="token punctuation">,</span> <span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">25.3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到的损失值也很大</p><blockquote><p>1223.05</p></blockquote><p>我们可以用<code>tf.assign()</code>对<code>W</code>和<code>b</code>变量重新赋值再检验一下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 给 W 和 b 赋新值</span>
fixW <span class="token operator">=</span> tf<span class="token punctuation">.</span>assign<span class="token punctuation">(</span>W<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fixb <span class="token operator">=</span> tf<span class="token punctuation">.</span>assign<span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># run 之后新值才会生效</span>
sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>fixW<span class="token punctuation">,</span> fixb<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 重新验证损失值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">10.4</span><span class="token punctuation">,</span> <span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">25.3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的损失值比之前的小了很多：</p><blockquote><p>159.94</p></blockquote><p>我们需要不断调整变量<code>W</code>和<code>b</code>的值，找到使损失值最小的<code>W</code>和<code>b</code>。这肯定是一个very boring的过程，因此 TensorFlow 提供了训练模型的方法，自动帮我们进行这些繁琐的训练工作。</p><h3 id="使用-tensorflow-训练模型" tabindex="-1"><a class="header-anchor" href="#使用-tensorflow-训练模型" aria-hidden="true">#</a> 使用 TensorFlow 训练模型</h3><p>TensorFlow 提供了很多优化算法来帮助我们训练模型。最简单的优化算法是**梯度下降(Gradient Descent)**算法，它通过不断的改变模型中变量的值，来找到最小损失值。<br> 如下的代码就是使用梯度下降优化算法帮助我们训练模型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个梯度下降优化器，学习率为0.001</span>
optimizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span>
train <span class="token operator">=</span> optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>

<span class="token comment"># 用两个数组保存训练数据</span>
x_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
y_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">10.4</span><span class="token punctuation">,</span> <span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">25.3</span><span class="token punctuation">]</span>

<span class="token comment"># 训练10000次</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_train<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y_train<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 打印一下训练后的结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;W: %s b: %s loss: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>W<span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_train <span class="token punctuation">,</span> y<span class="token punctuation">:</span> y_train<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印出来的训练结果如下，可以看到损失值已经很小了：</p><blockquote><p>W: [ 2.98236108] b: [ 2.07054377] loss: 2.12941</p></blockquote><p>我们整理一下前面的代码，完整的demo代码如下，将下面的代码保存在一个demo.py文件里，通过<code>python3 demo.py</code>执行一下就可以看到训练结果了：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 创建变量 W 和 b 节点，并设置初始值</span>
W <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建 x 节点，用来输入实验中的输入数据</span>
x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建线性模型</span>
linear_model <span class="token operator">=</span> W <span class="token operator">*</span> x <span class="token operator">+</span> b

<span class="token comment"># 创建 y 节点，用来输入实验中得到的输出数据，用于损失模型计算</span>
y <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建损失模型</span>
loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>linear_model <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 创建 Session 用来计算模型</span>
sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 初始化变量</span>
init <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>
sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span>

<span class="token comment"># 创建一个梯度下降优化器，学习率为0.001</span>
optimizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span>
train <span class="token operator">=</span> optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>

<span class="token comment"># 用两个数组保存训练数据</span>
x_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
y_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">10.4</span><span class="token punctuation">,</span> <span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">25.3</span><span class="token punctuation">]</span>

<span class="token comment"># 训练10000次</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_train<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y_train<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 打印一下训练后的结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;W: %s b: %s loss: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>W<span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
    b<span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_train<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y_train<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tensorflow-高级训练模型" tabindex="-1"><a class="header-anchor" href="#tensorflow-高级训练模型" aria-hidden="true">#</a> TensorFlow 高级训练模型</h2><p><code>tf.estimator</code>是TensorFlow提供的高级库，提供了很多常用的训练模型，可以简化机器学习中的很多训练过程，如：</p><ul><li><p>运行训练循环</p></li><li><p>运行评估循环</p></li><li><p>管理训练数据集</p></li></ul><h3 id="评估模型" tabindex="-1"><a class="header-anchor" href="#评估模型" aria-hidden="true">#</a> 评估模型</h3><p>前面的demo中我们构建了一个线性模型，通过使用一组实验数据训练我们的线性模型，我们得到了一个自认为损失最小的最优模型，根据训练结果我们的最优模型可以表示为下面的方程：</p><blockquote><p>$y=2.98x+2.07$</p></blockquote><p>但是这个我们自认为的最优模型是否会一直是最优的？我们需要通过一些新的实验数据来<strong>评估(evaluation)<strong>模型的</strong>泛化性能(generalization performance)</strong>，如果新的实验数据应用到到这个模型中损失值越小，那么这个模型的泛化性能就越好，反之就越差。下面的demo中我们也会看到怎么评估模型。</p><h3 id="使用linearregressor" tabindex="-1"><a class="header-anchor" href="#使用linearregressor" aria-hidden="true">#</a> 使用LinearRegressor</h3><p>前面我们构建了一个线性模型，通过训练得到一个线性回归方程。<code>tf.estimator</code>中也提供了线性回归的训练模型<code>tf.estimator.LinearRegressor</code>，下面的代码就是使用<code>LinearRegressor</code>训练并评估模型的方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 我们会用到NumPy来处理各种训练数据</span>
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 创建一个特征向量列表，该特征列表里只有一个特征向量，</span>
<span class="token comment"># 该特征向量为实数向量，只有一个元素的数组，且该元素名称为 x，</span>
<span class="token comment"># 我们还可以创建其他更加复杂的特征列表</span>
feature_columns <span class="token operator">=</span> <span class="token punctuation">[</span>tf<span class="token punctuation">.</span>feature_column<span class="token punctuation">.</span>numeric_column<span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># 创建一个LinearRegressor训练器，并传入特征向量列表</span>
estimator <span class="token operator">=</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>LinearRegressor<span class="token punctuation">(</span>feature_columns<span class="token operator">=</span>feature_columns<span class="token punctuation">)</span>

<span class="token comment"># 保存训练用的数据</span>
x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">,</span> <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">10.4</span><span class="token punctuation">,</span> <span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">25.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 保存评估用的数据</span>
x_eavl <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">7.</span><span class="token punctuation">,</span> <span class="token number">9.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
y_eavl <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7.6</span><span class="token punctuation">,</span> <span class="token number">17.2</span><span class="token punctuation">,</span> <span class="token number">23.6</span><span class="token punctuation">,</span> <span class="token number">28.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 用训练数据创建一个输入模型，用来进行后面的模型训练</span>
<span class="token comment"># 第一个参数用来作为线性回归模型的输入数据</span>
<span class="token comment"># 第二个参数用来作为线性回归模型损失模型的输入</span>
<span class="token comment"># 第三个参数batch_size表示每批训练数据的个数</span>
<span class="token comment"># 第四个参数num_epochs为epoch的次数，将训练集的所有数据都训练一遍为1次epoch</span>
<span class="token comment"># 低五个参数shuffle为取训练数据是顺序取还是随机取</span>
train_input_fn <span class="token operator">=</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>numpy_input_fn<span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> x_train<span class="token punctuation">}</span><span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 再用训练数据创建一个输入模型，用来进行后面的模型评估</span>
train_input_fn_2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>numpy_input_fn<span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> x_train<span class="token punctuation">}</span><span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 用评估数据创建一个输入模型，用来进行后面的模型评估</span>
eval_input_fn <span class="token operator">=</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>numpy_input_fn<span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> x_eavl<span class="token punctuation">}</span><span class="token punctuation">,</span> y_eavl<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 使用训练数据训练1000次</span>
estimator<span class="token punctuation">.</span>train<span class="token punctuation">(</span>input_fn<span class="token operator">=</span>train_input_fn<span class="token punctuation">,</span> steps<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token comment"># 使用原来训练数据评估一下模型，目的是查看训练的结果</span>
train_metrics <span class="token operator">=</span> estimator<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>input_fn<span class="token operator">=</span>train_input_fn_2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;train metrics: %r&quot;</span> <span class="token operator">%</span> train_metrics<span class="token punctuation">)</span>

<span class="token comment"># 使用评估数据评估一下模型，目的是验证模型的泛化性能</span>
eval_metrics <span class="token operator">=</span> estimator<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>input_fn<span class="token operator">=</span>eval_input_fn<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;eval metrics: %s&quot;</span> <span class="token operator">%</span> eval_metrics<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面的代码输出为：</p><blockquote><p>train metrics: {&#39;loss&#39;: 1.0493528, &#39;average_loss&#39;: 0.52467638, &#39;global_step&#39;: 1000}<br> eval metrics: {&#39;loss&#39;: 0.72186172, &#39;average_loss&#39;: 0.36093086, &#39;global_step&#39;: 1000}</p></blockquote><p>评估数据的loss比训练数据还要小，说明我们的模型泛化性能很好。</p><h3 id="自定义estimator模型" tabindex="-1"><a class="header-anchor" href="#自定义estimator模型" aria-hidden="true">#</a> 自定义Estimator模型</h3><p><code>tf.estimator</code>库中提供了很多预定义的训练模型，但是有可能这些训练模型不能满足我们的需求，我们需要使用自己构建的模型。<br> 我们可以通过实现<code>tf.estimator.Estimator</code>的子类来构建我们自己的训练模型，<code>LinearRegressor</code>就是<code>Estimator</code>的一个子类。另外我们也可以只给<code>Estimator</code>基类提供一个<code>model_fn</code>的实现，定义我们自己的模型训练、评估方法以及计算损失的方法。<br> 下面的代码就是使用我们最开始构建的线性模型实现自定义<code>Estimator</code>的实例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 定义模型训练函数，同时也定义了特征向量</span>
<span class="token keyword">def</span> <span class="token function">model_fn</span><span class="token punctuation">(</span>features<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 构建线性模型</span>
    W <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">&quot;W&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>
    b <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>
    y <span class="token operator">=</span> W <span class="token operator">*</span> features<span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> b
    <span class="token comment"># 构建损失模型</span>
    loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y <span class="token operator">-</span> labels<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 训练模型子图</span>
    global_step <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>get_global_step<span class="token punctuation">(</span><span class="token punctuation">)</span>
    optimizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>
    train <span class="token operator">=</span> tf<span class="token punctuation">.</span>group<span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">,</span>
                     tf<span class="token punctuation">.</span>assign_add<span class="token punctuation">(</span>global_step<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 通过EstimatorSpec指定我们的训练子图积极损失模型</span>
    <span class="token keyword">return</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>EstimatorSpec<span class="token punctuation">(</span>
        mode<span class="token operator">=</span>mode<span class="token punctuation">,</span>
        predictions<span class="token operator">=</span>y<span class="token punctuation">,</span>
        loss<span class="token operator">=</span>loss<span class="token punctuation">,</span>
        train_op<span class="token operator">=</span>train<span class="token punctuation">)</span>
    
<span class="token comment"># 创建自定义的训练模型</span>
estimator <span class="token operator">=</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>Estimator<span class="token punctuation">(</span>model_fn<span class="token operator">=</span>model_fn<span class="token punctuation">)</span>

<span class="token comment"># 后面的训练逻辑与使用LinearRegressor一样</span>
x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">,</span> <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">10.4</span><span class="token punctuation">,</span> <span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">25.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

x_eavl <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">7.</span><span class="token punctuation">,</span> <span class="token number">9.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
y_eavl <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7.6</span><span class="token punctuation">,</span> <span class="token number">17.2</span><span class="token punctuation">,</span> <span class="token number">23.6</span><span class="token punctuation">,</span> <span class="token number">28.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

train_input_fn <span class="token operator">=</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>numpy_input_fn<span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> x_train<span class="token punctuation">}</span><span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

train_input_fn_2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>numpy_input_fn<span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> x_train<span class="token punctuation">}</span><span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

eval_input_fn <span class="token operator">=</span> tf<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>numpy_input_fn<span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> x_eavl<span class="token punctuation">}</span><span class="token punctuation">,</span> y_eavl<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

estimator<span class="token punctuation">.</span>train<span class="token punctuation">(</span>input_fn<span class="token operator">=</span>train_input_fn<span class="token punctuation">,</span> steps<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>

train_metrics <span class="token operator">=</span> estimator<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>input_fn<span class="token operator">=</span>train_input_fn_2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;train metrics: %r&quot;</span> <span class="token operator">%</span> train_metrics<span class="token punctuation">)</span>

eval_metrics <span class="token operator">=</span> estimator<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>input_fn<span class="token operator">=</span>eval_input_fn<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;eval metrics: %s&quot;</span> <span class="token operator">%</span> eval_metrics<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的输出为</p><blockquote><p>train metrics: {&#39;loss&#39;: 0.8984344, &#39;global_step&#39;: 1000}<br> eval metrics: {&#39;loss&#39;: 0.48776609, &#39;global_step&#39;: 1000}</p></blockquote><h3 id="tensorboard" tabindex="-1"><a class="header-anchor" href="#tensorboard" aria-hidden="true">#</a> TensorBoard</h3><p>为了更方便 TensorFlow 的建模和调优，Google 还为 TensorFlow 开发了一款可视化的工具：TensorBoard，将我们第一个Demo的代码稍微改造一下，就可以使用 TensorBoard更加直观的理解 TensorFlow 的训练过程。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token comment"># 创建节点时设置name，方便在图中识别</span>
W <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;W&#39;</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 创建节点时设置name，方便在图中识别</span>
x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 线性模型</span>
linear_model <span class="token operator">=</span> W <span class="token operator">*</span> x <span class="token operator">+</span> b

<span class="token comment"># 损失模型隐藏到loss-model模块</span>
<span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">&quot;loss-model&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>linear_model <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 给损失模型的输出添加scalar，用来观察loss的收敛曲线</span>
    tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>scalar<span class="token punctuation">(</span><span class="token string">&quot;loss&quot;</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span>

optmizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span>

train <span class="token operator">=</span> optmizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>

x_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
y_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4.8</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">10.4</span><span class="token punctuation">,</span> <span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">25.3</span><span class="token punctuation">]</span>

sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
init <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>
sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span>

<span class="token comment"># 调用 merge_all() 收集所有的操作数据</span>
merged <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>merge_all<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 模型运行产生的所有数据保存到 /tmp/tensorflow 文件夹供 TensorBoard 使用</span>
writer <span class="token operator">=</span> tf<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>FileWriter<span class="token punctuation">(</span><span class="token string">&#39;/tmp/tensorflow&#39;</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>graph<span class="token punctuation">)</span>

<span class="token comment"># 训练10000次</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 训练时传入merge</span>
    summary<span class="token punctuation">,</span> _ <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>merged<span class="token punctuation">,</span> train<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_train<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y_train<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment"># 收集每次训练产生的数据</span>
    writer<span class="token punctuation">.</span>add_summary<span class="token punctuation">(</span>summary<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

curr_W<span class="token punctuation">,</span> curr_b<span class="token punctuation">,</span> curr_loss <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
    <span class="token punctuation">[</span>W<span class="token punctuation">,</span> b<span class="token punctuation">,</span> loss<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x_train<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y_train<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;After train W: %s b %s loss: %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>curr_W<span class="token punctuation">,</span> curr_b<span class="token punctuation">,</span> curr_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行完上面的代码后，训练过程产生的数据就保存在 /tmp/tensorflow 文件夹了，我们可以在命令行终端运行下面的命令启动 TensorBoard：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通过 --logdir 参数设置我们存放训练数据的目录</span>
$ tensorboard <span class="token parameter variable">--logdir</span> /tmp/tensorflow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在浏览器中打开 <code>http://localhost:6006</code> 页面就可以看到我们的模型数据了。<br> 首先在 <strong>SCALARS</strong> 页面我们可以看到我们通过 <code>tf.summary.scalar(&quot;loss&quot;, loss)</code>设置的loss收敛曲线，从曲线图中可以看出在训练了大概2000次的时候loss就已经收敛的差不多了。</p><figure><img src="`+m+'" alt="收敛曲线" tabindex="0" loading="lazy"><figcaption>收敛曲线</figcaption></figure><p>在 <strong>GRAPHS</strong> 页面可以看到我们构建的模型的数据流图：</p><figure><img src="'+v+'" alt="数据流图" tabindex="0" loading="lazy"><figcaption>数据流图</figcaption></figure><p>其中损失模型折叠到loss-model模块里了，双击该模块可以展开损失模型的内容：</p><figure><img src="'+b+'" alt="损失模型" tabindex="0" loading="lazy"><figcaption>损失模型</figcaption></figure><p>– end –</p><p>如上即为本人初学 TensorFlow 时的入门 demo，如果想对 TensorFlow 有更深的了解可以参考如下网站：</p>',116),h={href:"https://www.tensorflow.org/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://tensorflow.google.cn/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://wiki.jikexueyuan.com/project/tensorflow-zh/",target:"_blank",rel:"noopener noreferrer"},w=n("hr",null,null,-1),x=n("br",null,null,-1),q={href:"https://blog.csdn.net/geyunfei_/article/details/78782804",target:"_blank",rel:"noopener noreferrer"};function T(z,W){const a=e("ExternalLinkIcon");return o(),c("div",null,[f,n("ul",null,[n("li",null,[n("p",null,[n("a",h,[s("官方网站"),t(a)])])]),n("li",null,[n("p",null,[n("a",y,[s("官方中文网站"),t(a)])])]),n("li",null,[n("p",null,[n("a",_,[s("国内爱好者翻译的中文文档"),t(a)])])])]),w,n("p",null,[s("本文为CSDN博主「戈云飞」的原创文章，转载仅为自学。"),x,s(" 原文链接："),n("a",q,[s("https://blog.csdn.net/geyunfei_/article/details/78782804"),t(a)])])])}const P=p(g,[["render",T],["__file","2018122117.html.vue"]]);export{P as default};
