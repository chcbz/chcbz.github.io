import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,b as n,d as s,e as t,f as e}from"./app-5ZyUDSyM.js";const i="/assets/img-20230412230648-WuIu1x0P.png",u="/assets/img-20230412230800-3_ClP-Ep.png",r="/assets/img-20230412231125-O1w5Dtv8.png",d="/assets/img-20230412234907-dEQPQTqx.png",k="/assets/img-20230412235049-zkAEOJxY.png",v="/assets/img-20230412235157-65Bi3m1G.png",m="/assets/img-20230412235310-h0ABwW6Z.png",b="/assets/img-20230413000540-5DIcxUL5.png",g={},h=e('<p>​</p><h2 id="一、背景" tabindex="-1"><a class="header-anchor" href="#一、背景" aria-hidden="true">#</a> 一、背景</h2><h3 id="_1-来源" tabindex="-1"><a class="header-anchor" href="#_1-来源" aria-hidden="true">#</a> 1.来源</h3><p>Disruptor是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内部的内存队列的延迟问题，而不是分布式队列。基于Disruptor开发的系统单线程能支撑每秒600万订单，2010年在QCon演讲后，获得了业界关注。</p><h3 id="_2-应用背景和介绍" tabindex="-1"><a class="header-anchor" href="#_2-应用背景和介绍" aria-hidden="true">#</a> 2.应用背景和介绍</h3><p>据目前资料显示：应用Disruptor的知名项目有如下的一些：Storm, Camel, Log4j2,还有目前的美团点评技术团队也有很多不少的应用，或者说有一些借鉴了它的设计机制。<br> Disruptor是一个高性能的线程间异步通信的框架，即在同一个JVM进程中的多线程间消息传递。</p><h2 id="二、传统队列问题" tabindex="-1"><a class="header-anchor" href="#二、传统队列问题" aria-hidden="true">#</a> 二、传统队列问题</h2><p>首先这里说的队列也仅限于Java内部的消息队列</p><table><thead><tr><th>队列</th><th>有界性</th><th>锁</th><th>结构</th><th>队列类型</th></tr></thead><tbody><tr><td>ArrayBlockingQueue</td><td>有界</td><td>加锁</td><td>数组</td><td>阻塞</td></tr><tr><td>LinkedBlockingQueue</td><td>可选</td><td>加锁</td><td>链表</td><td>阻塞</td></tr><tr><td>ConcurrentLinkedQueue</td><td>无界</td><td>无锁</td><td>链表</td><td>非阻塞</td></tr><tr><td>LinkedTransferQueue</td><td>无界</td><td>无锁</td><td>链表</td><td>阻塞</td></tr><tr><td>PriorityBlockingQueue</td><td>无界</td><td>加锁</td><td>堆</td><td>阻塞</td></tr><tr><td>DelayQueue</td><td>无界</td><td>加锁</td><td>堆</td><td>阻塞</td></tr></tbody></table><p>队列的底层数据结构一般分成三种：数组、链表和堆。其中，堆这里是为了实现带有优先级特性的队列，暂且不考虑。<br> 在稳定性和性能要求特别高的系统中，为了防止生产者速度过快，导致内存溢出，只能选择有界队列；同时，为了减少Java的垃圾回收对系统性能的影响，会尽量选择array/heap格式的数据结构。这样筛选下来，符合条件的队列就只有ArrayBlockingQueue。但是ArrayBlockingQueue是通过加锁的方式保证线程安全，而且ArrayBlockingQueue还存在伪共享问题，这两个问题严重影响了性能。<br> 其中对于影响性能的两种方式：加锁和伪共享我们这里首先介绍下。加锁方式和不加锁的CAS方式这里不再进行介绍，我们这里首先对其中的伪共享问题讲解下。</p><h3 id="_1-伪共享概念" tabindex="-1"><a class="header-anchor" href="#_1-伪共享概念" aria-hidden="true">#</a> 1.伪共享概念</h3><h4 id="共享" tabindex="-1"><a class="header-anchor" href="#共享" aria-hidden="true">#</a> 共享</h4><p>计算机早就支持多核，软件也越来越多的支持多核运行，其实也可以叫做多处理运行。一个处理器对应一个物理插槽。其中一个插槽对应一个L3 Cache，一个槽包含多个cpu。一个cpu包含寄存器、L1 Cache、L2 Cache，如下图所示：</p><figure><img src="'+i+'" alt="CPU缓存机制" tabindex="0" loading="lazy"><figcaption>CPU缓存机制</figcaption></figure><p>其中越靠近cpu则，速度越快，容量则越小。其中L1和L2是只能给一个cpu进行共享，但是L3是可以给同一个槽内的cpu共享，而主内存，是可以给所有的cpu共享，这就是内存的共享。<br> 其中cpu执行运算的流程是这样：首先回去L1里面查找对应数据，如果没有则去L2、L3，如果都没有，则就会去主内存中去拿，走的路越长，则耗费时间越久，性能就会越低。<br> 需要注意的是，当线程之间进行共享数据的，需要将数据写回到主内存中，而另一个线程通过访问主内存获得新的数据。<br> 有人就会问了，多个线程之间不是会有一些非主内存的缓存进行共享么，那么另外一个线程会不会直接访问到修改之前的内存呢。答案是会的，但是有一点，就是这种数据我们可以通过设置缓存失效策略来进行保证缓存的最新，这个方式其实在cpu这里进行设置的，叫内存屏障（其实就是在cpu这里设置一条指令，这个指令就是禁止cpu重排序，这个屏障之前的不能出现在屏障之后，屏障之后的处理不能出现屏障之前，也就是屏障之后获取到的数据是最新的），对应到应用层面就是一个关键字volatile，下面会有一些进行介绍。</p><h4 id="缓存行" tabindex="-1"><a class="header-anchor" href="#缓存行" aria-hidden="true">#</a> 缓存行</h4><p>刚刚说的缓存失效其实指的是Cache line的失效，也就是缓存行，Cache是由很多个Cache line 组成的，每个缓存行大小是32~128字节（通常是64字节）。我们这里假设缓存行是64字节，而java的一个Long类型是8字节，这样的话一个缓存行就可以存8个Long类型的变量，如下图所示：</p><figure><img src="'+u+'" alt="一个缓存对应的缓存行的结构图" tabindex="0" loading="lazy"><figcaption>一个缓存对应的缓存行的结构图</figcaption></figure><p>cpu 每次从主内存中获取数据的时候都会将相邻的数据存入到同一个缓存行中。假设我们访问一个Long内存对应的数组的时候，如果其中一个被加载到内存中，那么对应的后面的7个数据也会被加载到对应的缓存行中，这样就会非常快的访问数据。</p><h4 id="伪共享" tabindex="-1"><a class="header-anchor" href="#伪共享" aria-hidden="true">#</a> 伪共享</h4><p>刚我们说了缓存的失效其实就是缓存行的失效，缓存行失效的原理是什么，这里又涉及到一个MESI协议（缓存一致性协议），我们这里不介绍这个，我们只需知道这个会在一个缓存中的数据变化的时候会将其他所有存储该缓存的缓存（其实是缓存行）都失效，感兴趣的可以看下附录部分，首先我们用Disruptor中很经典的讲解伪共享的图来讲解下：</p><figure><img src="'+r+`" alt="伪共享" tabindex="0" loading="lazy"><figcaption>伪共享</figcaption></figure><p>上图中显示的是一个槽的情况，里面是多个cpu， 如果cpu1上面的线程更新了变量X，根据MESI协议，那么变量X对应的所有缓存行都会失效（注意：虽然改的是X，但是X和Y被放到了一个缓存行，就一起失效了），这个时候如果cpu2中的线程进行读取变量Y，发现缓存行失效，想获取Y就会按照缓存查找策略，往上查找，如果期间cpu1对应的线程更新X后没有访问X（也就是没有刷新缓存行），cpu2的线程就只能从主内存中获取数据，对性能就会造成很大的影响，这就是伪共享。<br> 表面上 X 和 Y 都是被独立线程操作的，而且两操作之间也没有任何关系。只不过它们共享了一个缓存行，但所有竞争冲突都是来源于共享。</p><h3 id="_2-arrayblockingqueue-的伪共享问题" tabindex="-1"><a class="header-anchor" href="#_2-arrayblockingqueue-的伪共享问题" aria-hidden="true">#</a> 2.ArrayBlockingQueue 的伪共享问题</h3><p>刚我们已经讲了伪共享的问题，那么ArrayBlockingQueue的这个伪共享问题存在于哪里呢，分析下核心的部分源码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
    <span class="token comment">//获取当前对象锁</span>
    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
            <span class="token comment">//阻塞并释放锁，等待notFull.signal()通知</span>
            notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将数据放入数组</span>
        <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>
    <span class="token comment">//putIndex 就是入队的下标</span>
    items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
    <span class="token comment">//加锁</span>
    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">//阻塞并释放对象锁，并等待notEmpty.signal()通知</span>
            notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在数据不为空的情况下</span>
        <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>
    <span class="token comment">//takeIndex 是出队的下标</span>
    <span class="token class-name">E</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中最核心的三个成员变量为</p><ul><li><strong>putIndex</strong>：入队下标</li><li><strong>takeIndex</strong>：出队下标</li><li><strong>count</strong>：队列中元素的数量</li></ul><p>而三个成员的位置如下：</p><figure><img src="`+d+'" alt="ArrayBlockingQueue" tabindex="0" loading="lazy"><figcaption>ArrayBlockingQueue</figcaption></figure><p>这三个变量很容易放到同一个缓存行中，为此专门用一个伪共享检测工具进行检测，目前检测伪共享的工具只有Intel的Intel Vtune 目前刚发现有mac os 版本，但是经过测试发现，该工具无法分析macOs 的处理器配置，用的时候发现如下错误“无法检测到支持的处理器配置”，这个可以遗留给其他同学，工具的安装和使用方式，可以查看附录中的另外的一个连接。</p><h2 id="三、高性能原理" tabindex="-1"><a class="header-anchor" href="#三、高性能原理" aria-hidden="true">#</a> 三、高性能原理</h2><p>刚说了上面队列的两个性能问题：一个是加锁，一个是伪共享，那么disruptor是怎么解决这两个问题的，以及除了解决这两个问题之外，还引入了其他什么先进的东西提升性能的。<br> 这里简单列举下：</p><ul><li><strong>引入环形的数组结构</strong>：数组元素不会被回收，避免频繁的GC，</li><li><strong>无锁的设计</strong>：采用CAS无锁方式，保证线程的安全性</li><li><strong>属性填充</strong>：通过添加额外的无用信息，避免伪共享问题</li><li><strong>元素位置的定位</strong>：采用跟一致性哈希一样的方式，一个索引，进行自增</li></ul><h3 id="_1-环形数组结构" tabindex="-1"><a class="header-anchor" href="#_1-环形数组结构" aria-hidden="true">#</a> 1.环形数组结构</h3><p>环形数组结构是整个Disruptor的核心所在。<br> 首先因为是数组，所以要比链表快，而且根据我们对上面缓存行的解释知道，数组中的一个元素加载，相邻的数组元素也是会被预加载的，因此在这样的结构中，cpu无需时不时去主存加载数组中的下一个元素。而且，你可以为数组预先分配内存，使得数组对象一直存在（除非程序终止）。这就意味着不需要花大量的时间用于垃圾回收。此外，不像链表那样，需要为每一个添加到其上面的对象创造节点对象—对应的，当删除节点时，需要执行相应的内存清理操作。环形数组中的元素采用覆盖方式，避免了jvm的GC。<br> 其次结构作为环形，数组的大小为2的n次方，这样元素定位可以通过位运算效率会更高，这个跟一致性哈希中的环形策略有点像。在disruptor中，这个牛逼的环形结构就是RingBuffer，既然是数组，那么就有大小，而且这个大小必须是2的n次方，结构如下：</p><figure><img src="'+k+'" alt="RingBuffer" tabindex="0" loading="lazy"><figcaption>RingBuffer</figcaption></figure><p>其实质只是一个普通的数组，只是当放置数据填充满队列（即到达2^n-1位置）之后，再填充数据，就会从0开始，覆盖之前的数据，于是就相当于一个环。</p><h3 id="_2-生产和消费模式" tabindex="-1"><a class="header-anchor" href="#_2-生产和消费模式" aria-hidden="true">#</a> 2.生产和消费模式</h3><p>根据上面的环形结构，我们来具体分析一下Disruptor的工作原理。<br> Disruptor 不像传统的队列，分为一个队头指针和一个队尾指针，而是只有一个角标（上面的seq），那么这个是如何保证生产的消息不会覆盖没有消费掉的消息呢。<br> 在Disruptor中生产者分为单生产者和多生产者，而消费者并没有区分。单生产者情况下，就是普通的生产者向RingBuffer中放置数据，消费者获取最大可消费的位置，并进行消费。而多生产者时候，又多出了一个跟RingBuffer同样大小的Buffer，称为AvailableBuffer。在多生产者中，每个生产者首先通过CAS竞争获取可以写的空间，然后再进行慢慢往里放数据，如果正好这个时候消费者要消费数据，那么每个消费者都需要获取最大可消费的下标，这个下标是在AvailableBuffer进行获取得到的最长连续的序列下标。</p><h4 id="多生产者——生产" tabindex="-1"><a class="header-anchor" href="#多生产者——生产" aria-hidden="true">#</a> 多生产者——生产</h4><p>假设现在又两个生产者，开始写数据，通过CAS竞争，w1得到的34的空间，w2得到了78的空间，其中6是代表已被写入或者没有被消费的数据。</p><figure><img src="'+v+'" alt="多生产者——生产" tabindex="0" loading="lazy"><figcaption>多生产者——生产</figcaption></figure><p>绿色代表已经写OK的数据</p><h4 id="多生产者——消费" tabindex="-1"><a class="header-anchor" href="#多生产者——消费" aria-hidden="true">#</a> 多生产者——消费</h4><p>假设三个生产者在写中，还没有置位AvailableBuffer，那么消费者可获取的消费下标只能获取到6，然后等生产者都写OK后，通知到消费者，消费者继续重复上面的步骤。如下图</p><figure><img src="'+m+'" alt="多生产者——消费" tabindex="0" loading="lazy"><figcaption>多生产者——消费</figcaption></figure><h4 id="消费者常见的等待" tabindex="-1"><a class="header-anchor" href="#消费者常见的等待" aria-hidden="true">#</a> 消费者常见的等待</h4><ul><li><strong>BusySpinWaitStrategy</strong>： 自旋等待，类似Linux Kernel使用的自旋锁。低延迟但同时对CPU资源的占用也多。</li><li>BlockingWaitStrategy： 使用锁和条件变量。CPU资源的占用少，延迟大，默认等待策略。</li><li><strong>SleepingWaitStrategy</strong>： 在多次循环尝试不成功后，选择让出CPU，等待下次调度，多次调度后仍不成功，尝试前睡眠一个纳秒级别的时间再尝试。这种策略平衡了延迟和CPU资源占用，但延迟不均匀。</li><li><strong>YieldingWaitStrategy</strong>： 在多次循环尝试不成功后，选择让出CPU，等待下次调。平衡了延迟和CPU资源占用，但延迟也比较均匀。</li><li><strong>PhasedBackoffWaitStrategy</strong>： 上面多种策略的综合，CPU资源的占用少，延迟大</li></ul><h3 id="_3-牛逼的下标指针" tabindex="-1"><a class="header-anchor" href="#_3-牛逼的下标指针" aria-hidden="true">#</a> 3.牛逼的下标指针</h3>',53),f={href:"https://link.jianshu.com/?t=https://github.com/LMAX-Exchange/disruptor/issues/154#event-671348970",target:"_blank",rel:"noopener noreferrer"},y=n("em",null,"24",-1),w=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">LhsPadding</span><span class="token punctuation">{</span>
    <span class="token comment">//缓存行补齐， 提升cache缓存命中率</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">,</span> p5<span class="token punctuation">,</span> p6<span class="token punctuation">,</span> p7<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Value</span> <span class="token keyword">extends</span> <span class="token class-name">LhsPadding</span><span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RhsPadding</span> <span class="token keyword">extends</span> <span class="token class-name">Value</span><span class="token punctuation">{</span>
    <span class="token comment">//缓存行补齐， 提升cache缓存命中率</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span> p9<span class="token punctuation">,</span> p10<span class="token punctuation">,</span> p11<span class="token punctuation">,</span> p12<span class="token punctuation">,</span> p13<span class="token punctuation">,</span> p14<span class="token punctuation">,</span> p15<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sequence</span> <span class="token keyword">extends</span> <span class="token class-name">RhsPadding</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、用法" tabindex="-1"><a class="header-anchor" href="#四、用法" aria-hidden="true">#</a> 四、用法</h2><p>用法很简单，一共三个角色：生产者，消费者，disruptor对象</p><h3 id="_1-简单用法" tabindex="-1"><a class="header-anchor" href="#_1-简单用法" aria-hidden="true">#</a> 1.简单用法</h3><h4 id="disruptor对象" tabindex="-1"><a class="header-anchor" href="#disruptor对象" aria-hidden="true">#</a> disruptor对象</h4><p>disruptor 就两个构造方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Disruptor</span><span class="token punctuation">(</span>
        <span class="token keyword">final</span> <span class="token class-name">EventFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> eventFactory<span class="token punctuation">,</span>    <span class="token comment">// 数据实体构造工厂</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> ringBufferSize<span class="token punctuation">,</span>              <span class="token comment">// 队列大小，必须是2的次方</span>
        <span class="token keyword">final</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>     <span class="token comment">// 线程工厂</span>
        <span class="token keyword">final</span> <span class="token class-name">ProducerType</span> producerType<span class="token punctuation">,</span>       <span class="token comment">// 生产者类型，单个生产者还是多个</span>
        <span class="token keyword">final</span> <span class="token class-name">WaitStrategy</span> waitStrategy<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">// 消费者等待策略</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Disruptor</span><span class="token punctuation">(</span>
    <span class="token keyword">final</span> <span class="token class-name">EventFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> eventFactory<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> ringBufferSize<span class="token punctuation">,</span>
    <span class="token keyword">final</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生产处理" tabindex="-1"><a class="header-anchor" href="#生产处理" aria-hidden="true">#</a> 生产处理</h4><p>生产者这里没有固定的对象，只是需要获取放置数据的位置，然后进行publish</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">RingBuffer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgEvent</span><span class="token punctuation">&gt;</span></span> ringBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disruptor<span class="token punctuation">.</span><span class="token function">getRingBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取下一个放置数据的位置</span>
    <span class="token keyword">long</span> next <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token class-name">MsgEvent</span> event <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        event<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">//发布事件</span>
        ringBuffer<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消费处理" tabindex="-1"><a class="header-anchor" href="#消费处理" aria-hidden="true">#</a> 消费处理</h4><p>消费处理可以有如下几种</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">EventHandlerGroup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleEventsWith</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> handlers<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">EventHandlerGroup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleEventsWith</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">EventProcessor</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> processors<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">EventHandlerGroup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleEventsWith</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">EventProcessorFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> eventProcessorFactories<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">EventHandlerGroup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleEventsWithWorkerPool</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">WorkHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> workHandlers<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="简单用例" tabindex="-1"><a class="header-anchor" href="#简单用例" aria-hidden="true">#</a> 简单用例</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//消费者</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgConsumer</span> <span class="token keyword">implements</span> <span class="token class-name">EventHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">MsgEvent</span> msgEvent<span class="token punctuation">,</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot; -&gt; 接收到信息： &quot;</span><span class="token operator">+</span>msgEvent<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//生产者处理</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgProducer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Disruptor</span> disruptor<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MsgProducer</span><span class="token punctuation">(</span><span class="token class-name">Disruptor</span> disruptor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>disruptor <span class="token operator">=</span> disruptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">RingBuffer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgEvent</span><span class="token punctuation">&gt;</span></span> ringBuffer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disruptor<span class="token punctuation">.</span><span class="token function">getRingBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> next <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token class-name">MsgEvent</span> event <span class="token operator">=</span> ringBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            event<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            ringBuffer<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span><span class="token punctuation">{</span>
        dataList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//触发测试</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisruptorDemo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgEvent</span><span class="token punctuation">&gt;</span></span> disruptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">MsgEvent</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//定义消费者</span>
        <span class="token class-name">MsgConsumer</span> msg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MsgConsumer</span> msg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MsgConsumer</span> msg3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//绑定配置关系</span>
        disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span>msg1<span class="token punctuation">,</span> msg2<span class="token punctuation">,</span> msg3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 定义要发送的数据</span>
        <span class="token class-name">MsgProducer</span> msgProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgProducer</span><span class="token punctuation">(</span>disruptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        msgProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;nihao&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hah&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出（消费没有固定顺序）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token operator">-&gt;</span> 接收到信息： nihao
<span class="token number">3</span> <span class="token operator">-&gt;</span> 接收到信息： nihao
<span class="token number">3</span> <span class="token operator">-&gt;</span> 接收到信息： hah
<span class="token number">2</span> <span class="token operator">-&gt;</span> 接收到信息： nihao
<span class="token number">2</span> <span class="token operator">-&gt;</span> 接收到信息： hah
<span class="token number">1</span> <span class="token operator">-&gt;</span> 接收到信息： hah
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-其他用法" tabindex="-1"><a class="header-anchor" href="#_2-其他用法" aria-hidden="true">#</a> 2.其他用法</h3><p>上面主要介绍了多消费统一消费，但是在生产者模型中是有很多种，如下，一对一，一对多，多对多，多对一</p><figure><img src="`+b+`" alt="生产者模型" tabindex="0" loading="lazy"><figcaption>生产者模型</figcaption></figure><p>1.单生产者生产数据，单消费者消费数据，一般用在后台处理的业务逻辑中。<br> 2.单生产者生产数据，多个消费者消费数据（这里面有两种情况：同一个消息，可以被多个消费者分别消费。或者多个消费者组成一个组，一个消费者消费一个数据）。<br> 3.多个生产者生产数据，单个消费者消费数据，可以用在限流或者排队等候单一资源处理的场景中。<br> 4.多个生产者分别生产数据，多个消费者消费数据（这里面有两种情况：同一个消息，可以被多个消费者分别消费。或者多个消费者组成一个组，一个消费者消费一个数据）。</p><h4 id="生产者配置" tabindex="-1"><a class="header-anchor" href="#生产者配置" aria-hidden="true">#</a> 生产者配置</h4><p>其中生产模式中的单生产者模式和多生产模式，这里主要是通过一个枚举：ProduceType来区分，建议，多个生产者用多生产者模式，性能会好点。</p><h4 id="消费者配置" tabindex="-1"><a class="header-anchor" href="#消费者配置" aria-hidden="true">#</a> 消费者配置</h4><p>消费者模式这里分为两种：</p><ul><li><strong>统一消费</strong>：每个消费者都消费一份生产者生产的数据</li><li><strong>分组消费</strong>：每个生产这生产的数据只被消费一次</li></ul><p>统一消费像上面简单用法中运用即可，对于分组消费，用函数 handleEventsWithWorkerPool 即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 分组处理 handleEventWithWorkerPool
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgEvent</span><span class="token punctuation">&gt;</span></span> disruptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Disruptor</span><span class="token punctuation">(</span><span class="token class-name">MsgEvent</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWithWorkerPool</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyWorkHandler</span><span class="token punctuation">(</span><span class="token string">&quot;work1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyWorkHandler</span><span class="token punctuation">(</span><span class="token string">&quot;work2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">MsgProducer</span> msgProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgProducer</span><span class="token punctuation">(</span>disruptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>work1 <span class="token operator">:</span> <span class="token class-name">MsgEvent</span><span class="token punctuation">(</span>value<span class="token operator">=</span>bbb<span class="token punctuation">)</span>
work2 <span class="token operator">:</span> <span class="token class-name">MsgEvent</span><span class="token punctuation">(</span>value<span class="token operator">=</span>aaa<span class="token punctuation">)</span>
work1 <span class="token operator">:</span> <span class="token class-name">MsgEvent</span><span class="token punctuation">(</span>value<span class="token operator">=</span>cc<span class="token punctuation">)</span>
work2 <span class="token operator">:</span> <span class="token class-name">MsgEvent</span><span class="token punctuation">(</span>value<span class="token operator">=</span>dd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消费顺序配置" tabindex="-1"><a class="header-anchor" href="#消费顺序配置" aria-hidden="true">#</a> 消费顺序配置</h4><p>在消费配置中，这里可以有很多种消费方式，比如：</p><h5 id="_1-消费者的顺序消费" tabindex="-1"><a class="header-anchor" href="#_1-消费者的顺序消费" aria-hidden="true">#</a> 1.消费者的顺序消费</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 测试顺序消费
 * 每一条消息的消费者1和3消费完毕后，消费者2再进行消费
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">MsgConsumer</span> msg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MsgConsumer</span> msg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MsgConsumer</span> msg3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MsgEvent</span><span class="token punctuation">&gt;</span></span> disruptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Disruptor</span><span class="token punctuation">(</span><span class="token class-name">MsgEvent</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span>msg1<span class="token punctuation">,</span> msg3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">MsgProducer</span> msgProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgProducer</span><span class="token punctuation">(</span>disruptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ddd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出（里面的是根据每一条消息的消费者顺序）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token operator">-&gt;</span> 接收到信息： aaa
<span class="token number">3</span> <span class="token operator">-&gt;</span> 接收到信息： aaa
<span class="token number">1</span> <span class="token operator">-&gt;</span> 接收到信息： bbb
<span class="token number">1</span> <span class="token operator">-&gt;</span> 接收到信息： ccc
<span class="token number">2</span> <span class="token operator">-&gt;</span> 接收到信息： aaa
<span class="token number">3</span> <span class="token operator">-&gt;</span> 接收到信息： bbb
<span class="token number">3</span> <span class="token operator">-&gt;</span> 接收到信息： ccc
<span class="token number">3</span> <span class="token operator">-&gt;</span> 接收到信息： ddd
<span class="token number">1</span> <span class="token operator">-&gt;</span> 接收到信息： ddd
<span class="token number">2</span> <span class="token operator">-&gt;</span> 接收到信息： bbb
<span class="token number">2</span> <span class="token operator">-&gt;</span> 接收到信息： ccc
<span class="token number">2</span> <span class="token operator">-&gt;</span> 接收到信息： ddd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-消费分为多个支线-而且也有消费顺序问题" tabindex="-1"><a class="header-anchor" href="#_2-消费分为多个支线-而且也有消费顺序问题" aria-hidden="true">#</a> 2.消费分为多个支线，而且也有消费顺序问题</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 测试多支线消费
 * 消费者1和消费者3一个支线，消费者2和消费者4一个支线，消费者3和消费者4消费完毕后，消费者5再进行消费
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">MsgConsumer</span> msg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MsgConsumer</span> msg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MsgConsumer</span> msg3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MsgConsumer</span> msg4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MsgConsumer</span> msg5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//支线：消费者1和消费者3</span>
    disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span>msg1<span class="token punctuation">,</span> msg3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//支线：消费者2和消费者4</span>
    disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span>msg2<span class="token punctuation">,</span> msg4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//消费者3和消费者4执行完之后，指向消费者5</span>
    disruptor<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>msg3<span class="token punctuation">,</span> msg4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span>msg5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">MsgProducer</span> msgProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MsgProducer</span><span class="token punctuation">(</span>disruptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msgProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ddd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token operator">-&gt;</span> 接收到信息： aaa
<span class="token number">2</span> <span class="token operator">-&gt;</span> 接收到信息： aaa
<span class="token number">2</span> <span class="token operator">-&gt;</span> 接收到信息： bbb
<span class="token number">3</span> <span class="token operator">-&gt;</span> 接收到信息： aaa
<span class="token number">3</span> <span class="token operator">-&gt;</span> 接收到信息： bbb
<span class="token number">4</span> <span class="token operator">-&gt;</span> 接收到信息： aaa
<span class="token number">4</span> <span class="token operator">-&gt;</span> 接收到信息： bbb
<span class="token number">5</span> <span class="token operator">-&gt;</span> 接收到信息： aaa
<span class="token number">1</span> <span class="token operator">-&gt;</span> 接收到信息： bbb
<span class="token number">5</span> <span class="token operator">-&gt;</span> 接收到信息： bbb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、常见问题" tabindex="-1"><a class="header-anchor" href="#五、常见问题" aria-hidden="true">#</a> 五、常见问题</h2><p>下面介绍下一些常见问题。</p><p><strong>1.disruptor应该如何用才能发挥最大功效？</strong></p><p>disruptor原本就是事件驱动的设计，其整个架构跟普通的多线程很不一样。比如一种用法，将disruptor作为业务处理，中间带I/O处理，这种玩法比多线程还慢；相反，如果将disruptor做业务处理，需要I/O时采用nio异步调用，不阻塞disruptor消费者线程，等到I/O异步调用回来后在回调方法中将后续处理重新塞到disruptor队列中，可以看出来，这是典型的事件处理架构，确实能在时间上占据优势，加上ringBuffer固有的几项性能优化，能让disruptor发挥最大功效。</p><p><strong>2.如果buffer常常是满的怎么办？</strong></p><p>一种是把buffer变大，另一种是从源头解决producer和consumer速度差异太大问题，比如试着把producer分流，或者用多个disruptor，使每个disruptor的load变小。</p><p><strong>3.什么时候使用disruptor？</strong></p><p>如果对延迟的需求很高，可以考虑使用。</p><h2 id="六、参考" tabindex="-1"><a class="header-anchor" href="#六、参考" aria-hidden="true">#</a> 六、参考</h2>`,48),_=n("br",null,null,-1),x={href:"https://github.com/LMAX-Exchange/disruptor",target:"_blank",rel:"noopener noreferrer"},j=n("br",null,null,-1),E={href:"https://lmax-exchange.github.io/disruptor/",target:"_blank",rel:"noopener noreferrer"},q=n("br",null,null,-1),M=n("br",null,null,-1),C={href:"https://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html",target:"_blank",rel:"noopener noreferrer"},B=n("br",null,null,-1),P=n("br",null,null,-1),L={href:"http://in355hz.iteye.com/blog/1797829",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),A=n("br",null,null,-1),D={href:"https://www.cnblogs.com/cyfonly/p/5800758.html",target:"_blank",rel:"noopener noreferrer"},W=n("br",null,null,-1),I=n("br",null,null,-1),T={href:"https://www.jianshu.com/p/71c9bc3bfe1a",target:"_blank",rel:"noopener noreferrer"},z=n("br",null,null,-1),Q=n("br",null,null,-1),F={href:"https://www.cnblogs.com/Binhua-Liu/p/5620339.html",target:"_blank",rel:"noopener noreferrer"},R=n("br",null,null,-1),O=n("br",null,null,-1),V={href:"https://software.intel.com/zh-cn/vtune-amplifier-cookbook-false-sharing",target:"_blank",rel:"noopener noreferrer"},X=n("br",null,null,-1),H=n("br",null,null,-1),U={href:"https://www.jianshu.com/p/71c9bc3bfe1a",target:"_blank",rel:"noopener noreferrer"},G=n("br",null,null,-1),N={href:"http://wiki.jikexueyuan.com/project/disruptor-getting-started/the-framework.html",target:"_blank",rel:"noopener noreferrer"},Y=n("br",null,null,-1),J={href:"https://www.jianshu.com/p/d6375295fad4",target:"_blank",rel:"noopener noreferrer"},K=n("br",null,null,-1),Z={href:"http://colobu.com/2014/12/22/why-is-disruptor-faster-than-ArrayBlockingQueue/",target:"_blank",rel:"noopener noreferrer"},$=n("br",null,null,-1),nn={href:"https://blog.csdn.net/kobejayandy/article/details/18329583",target:"_blank",rel:"noopener noreferrer"},sn=n("br",null,null,-1),an={href:"https://blog.csdn.net/u014313492/article/details/42556341",target:"_blank",rel:"noopener noreferrer"},tn=n("br",null,null,-1),en=n("br",null,null,-1),pn={href:"http://in355hz.iteye.com/blog/1797829",target:"_blank",rel:"noopener noreferrer"},on=n("br",null,null,-1),cn=n("br",null,null,-1),ln={href:"http://www.uml.org.cn/zjjs/2016060310.asp",target:"_blank",rel:"noopener noreferrer"},un=n("br",null,null,-1),rn=n("br",null,null,-1),dn={href:"http://357029540.iteye.com/blog/2395677",target:"_blank",rel:"noopener noreferrer"},kn=n("hr",null,null,-1),vn=n("br",null,null,-1),mn={href:"https://blog.csdn.net/zhouzhenyong/article/details/81303011",target:"_blank",rel:"noopener noreferrer"};function bn(gn,hn){const a=o("ExternalLinkIcon");return c(),l("div",null,[h,n("p",null,[s("RingBuffer的指针（Sequence）属于一个volatile变量，同时也是我们能够不用锁操作就能实现Disruptor的原因之一，而且通过缓存行补充，避免伪共享问题。 该所谓指针是通过一直自增的方式来获取下一个可写或者可读数据，该数据是Long类型，不用担心会爆掉。有人计算过： "),n("a",f,[s("long的范围最大可以达到9223372036854775807，一年365 "),y,s(" 60 * 60 = 31536000秒，每秒产生1W条数据，也可以使用292年"),t(a)]),s("。")]),w,n("p",null,[s("官方git"),_,n("a",x,[s("https://github.com/LMAX-Exchange/disruptor"),t(a)]),j,n("a",E,[s("https://lmax-exchange.github.io/disruptor/"),t(a)]),q,s(" 伪共享："),M,n("a",C,[s("https://mechanical-sympathy.blogspot.com/2011/07/false-sharing.html"),t(a)]),B,s(" 内存屏障："),P,n("a",L,[s("http://in355hz.iteye.com/blog/1797829"),t(a)]),S,s(" MESI（缓存一致性协议）"),A,n("a",D,[s("https://www.cnblogs.com/cyfonly/p/5800758.html"),t(a)]),W,s(" ArrayBlockingQueue 伪共享问题"),I,n("a",T,[s("https://www.jianshu.com/p/71c9bc3bfe1a"),t(a)]),z,s(" jdk 本身针对伪共享做的处理"),Q,n("a",F,[s("https://www.cnblogs.com/Binhua-Liu/p/5620339.html"),t(a)]),R,s(" intel vtune 分析伪共享案例"),O,n("a",V,[s("https://software.intel.com/zh-cn/vtune-amplifier-cookbook-false-sharing"),t(a)]),X,s(" RingBuffer工作原理"),H,n("a",U,[s("https://www.jianshu.com/p/71c9bc3bfe1a"),t(a)]),G,n("a",N,[s("http://wiki.jikexueyuan.com/project/disruptor-getting-started/the-framework.html"),t(a)]),Y,n("a",J,[s("https://www.jianshu.com/p/d6375295fad4"),t(a)]),K,n("a",Z,[s("http://colobu.com/2014/12/22/why-is-disruptor-faster-than-ArrayBlockingQueue/"),t(a)]),$,n("a",nn,[s("https://blog.csdn.net/kobejayandy/article/details/18329583"),t(a)]),sn,n("a",an,[s("https://blog.csdn.net/u014313492/article/details/42556341"),t(a)]),tn,s(" Disruptor 是如何工作的"),en,n("a",pn,[s("http://in355hz.iteye.com/blog/1797829"),t(a)]),on,s(" 队列的各种场景"),cn,n("a",ln,[s("http://www.uml.org.cn/zjjs/2016060310.asp"),t(a)]),un,s(" 消费顺序"),rn,n("a",dn,[s("http://357029540.iteye.com/blog/2395677"),t(a)])]),kn,n("p",null,[s("本文为CSDN博主「老柿子」的原创文章，转载仅为自学。"),vn,s(" 原文链接："),n("a",mn,[s("https://blog.csdn.net/zhouzhenyong/article/details/81303011"),t(a)])])])}const wn=p(g,[["render",bn],["__file","2023041222.html.vue"]]);export{wn as default};
